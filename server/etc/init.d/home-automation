#!/bin/sh

NAME=home_automation
LOG_FILE=/var/log/home_automation.log
CONFIG_FILE=/etc/home_automation/setting.conf
PID_FILE=/var/run/home_automation.pid
DAEMON=/usr/bin/python3
DAEMON_ARGS="-m home_automation -l ${LOG_FILE} -c ${CONFIG_FILE}"
SCRIPTNAME=$0

do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PID_FILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PID_FILE --exec $DAEMON --background --make-pidfile -- \
		$DAEMON_ARGS \
		|| return 2
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --pidfile $PID_FILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	do_start
	;;
  stop)
	do_stop
	;;
  restart)
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) echo 0 ;;
			1) echo 1 ;; # Old process is still running
			*) echo 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
	exit 3
	;;
esac
:

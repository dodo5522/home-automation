%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 14.0.0%%For: (\621O\623c \627F\613I\614b) ()%%Title: (\603t\603\611\603\617\601[\603n\603X\603P\603b\603g.eps)%%CreationDate: 11/09/08 20:51%%Canvassize: 16383%%BoundingBox: 173 325 423 515%%HiResBoundingBox: 173.6455 325.6436 422.1406 514.3286%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3896 298.5 420.3896%AI3_TileBox: 18.1401 40.9453 577.1406 823.9448%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595.2803 841.8896%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -452 866.8887 1 1502 905 18 0 0 68 128 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (\203g\203\214\201[\203X) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe \203G\203\223\203x\203\215\201[\203v\203v\203\211\203O\203C\203\223) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe \203\211\203C\203u\203y\203C\203\223\203g\203v\203\211\203O\203C\203\223) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe \203u\203\214\203\223\203h\203v\203\211\203O\203C\203\223) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe \203J\203\212\203O\203\211\203t\203B\203u\203\211\203V\203v\203\211\203O\203C\203\223) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe \203V\203\223\203{\203\213) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (\603G\603b\603W\602\711\603t\603F\601[\603h)(\603G\603b\603W\602\711\603t\603F\601[\603h) 0 3 Bd[00 %_Br00 %_Br[0 0 0 1 1 50 100 %_BS%_0 0 0 1 1 50 100 Bs0 0 0 1 1 50 50 %_BS%_0 0 0 1 1 50 50 Bs0 0 0 1 1 50 0 %_BS%_0 0 0 1 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603X\601[\603o\601[\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)(\603X\601[\603o\601[\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 1 3 Bd[00 %_Br00 %_Br[0 0 0 1 1 56.0729 57.4443 %_BS%_0 0 0 1 1 56.0729 57.4443 Bs0 0 0 1 1 31.8603 79.7713 %_BS%_0 0 0 1 1 31.8603 79.7713 Bs0 0 0 1 1 50 100 %_BS%_0 0 0 1 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623)(\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 0 0 1 50 0 %_BS%_0 0 0 0 1 50 0 Bs0 0 0 1 1 51.0204 100 %_BS%_0 0 0 1 1 51.0204 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623)(\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 0 1 1 50 100 %_BS%_0 0 0 1 1 50 100 Bs0 0 0 0 1 50 0 %_BS%_0 0 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (\603N\603\615\603X\603p\603^\601[\603\623)(\603N\603\615\603X\603p\603^\601[\603\623) 8.3721 8.3701 63.3369 63.3369 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR8.3721 8.3711 mS%AI6_EndPatternLayer) &(0 O 0 R 0.118257 0.532982 0.833371 0.007263 k 0.118257 0.532982 0.833371 0.007263 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR24.8623 2.875 m24.8623 13.8672 L13.8682 13.8672 L13.8682 24.8604 L2.875 24.8604 L2.875 2.875 L24.8623 2.875 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR30.3574 19.3643 mS%AI6_EndPatternLayer) &(0 O 0 R 0.547405 0.061786 0.82 0.001527 k 0.547405 0.061786 0.82 0.001527 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR35.8535 24.8604 m46.8486 24.8604 L46.8486 13.8672 L35.8535 13.8672 L35.8535 2.875 L24.8623 2.875 L24.8623 13.8672 L13.8682 13.8672 L13.8682 24.8604 L24.8623 24.8604 L24.8623 35.8535 L35.8535 35.8535 L35.8535 24.8604 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR19.3643 41.3496 mS%AI6_EndPatternLayer) &(0 O 0 R 0.118257 0.532982 0.833371 0.007263 k 0.118257 0.532982 0.833371 0.007263 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR24.8623 46.8477 m35.8535 46.8477 L35.8535 35.8535 L24.8623 35.8535 L24.8623 24.8604 L13.8682 24.8604 L13.8682 35.8535 L2.875 35.8535 L2.875 46.8477 L13.8682 46.8477 L13.8682 57.8398 L24.8623 57.8398 L24.8623 46.8477 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR8.3721 63.3369 mS%AI6_EndPatternLayer) &(0 O 0 R 0.1116 0.6324 0.7254 0.0093 k 0.1116 0.6324 0.7254 0.0093 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR2.875 68.834 m24.8613 68.834 L24.8613 57.8398 L13.8672 57.8398 L13.8672 46.8477 L2.875 46.8477 L2.875 68.834 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR52.3447 30.3574 mS%AI6_EndPatternLayer) &(0 O 0 R 0.667567 0.075349 1 0.001862 k 0.667567 0.075349 1 0.001862 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR57.8408 35.8535 m68.833 35.8535 L68.833 24.8604 L57.8408 24.8604 L57.8408 13.8682 L46.8486 13.8682 L46.8486 24.8604 L35.8535 24.8604 L35.8535 35.8535 L46.8486 35.8535 L46.8486 46.8477 L57.8408 46.8477 L57.8408 35.8535 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR63.3369 8.3711 mS%AI6_EndPatternLayer) &(0 O 0 R 0.254032 0.88394 0.581872 0.106752 k 0.254032 0.88394 0.581872 0.106752 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR68.833 24.8604 m57.8408 24.8604 L57.8408 13.8682 L46.8486 13.8682 L46.8486 2.875 L68.833 2.875 L68.833 24.8604 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR41.3496 52.3428 mS%AI6_EndPatternLayer) &(0 O 0 R 0.12 0.68 0.78 0.01 k 0.12 0.68 0.78 0.01 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR46.8486 57.8398 m57.8408 57.8398 L57.8408 46.8477 L46.8486 46.8477 L46.8486 35.8535 L35.8535 35.8535 L35.8535 46.8477 L24.8613 46.8477 L24.8613 57.8398 L35.8535 57.8398 L35.8535 68.834 L46.8486 68.834 L46.8486 57.8398 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR63.3369 63.3369 mS%AI6_EndPatternLayer) &(0 O 0 R 0.667567 0.075349 1 0.001862 k 0.667567 0.075349 1 0.001862 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR68.833 46.8477 m57.8408 46.8477 L57.8408 57.8398 L46.8486 57.8398 L46.8486 68.834 L68.833 68.834 L68.833 46.8477 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.547405 0.061786 0.82 0.001527 k 0.547405 0.061786 0.82 0.001527 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR2.875 35.8535 m13.8682 35.8535 L13.8682 24.8604 L2.875 24.8604 LS%AI6_EndPatternLayer) &(0 O 0 R 0.0876 0.4964 0.5694 0.0073 k 0.0876 0.4964 0.5694 0.0073 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR35.8535 68.834 m35.8535 57.8398 L24.8613 57.8398 L24.8613 68.834 LS%AI6_EndPatternLayer) &(0 O 0 R 0.529015 0.895109 0.075715 0.002747 k 0.529015 0.895109 0.075715 0.002747 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR68.833 35.8535 m57.8408 35.8535 L57.8408 46.8477 L68.833 46.8477 LS%AI6_EndPatternLayer) &(0 O 0 R 0.254032 0.88394 0.581872 0.106752 k 0.254032 0.88394 0.581872 0.106752 K) @(%AI6_BeginPatternLayer0 J 0 j 5.75 w 4 M []0 d0 XR35.8535 2.875 m35.8535 13.8672 L46.8486 13.8672 L46.8486 2.875 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed 11)0 Auu0 J 0 j 1 w 4 M []0 d0 XR-4019.1992 4737.8887 m-3928.5903 4737.8887 L-3928.5903 4726.0078 L-4019.1992 4726.0078 L-4019.1992 4737.8887 Lnuu0 O0 0 0 1 k-3936.0437 4730.6201 m-3936.3442 4730.6064 -3936.6472 4730.5889 -3936.9497 4730.5713 C-3936.7976 4730.6396 -3936.6472 4730.7461 -3936.4929 4730.9141 C-3936.2952 4731.0249 -3936.1919 4730.8101 -3936.0437 4730.6201 Cf/BBAccumRotation (0.598766) XT-3937.7876 4730.5205 m-3937.8423 4730.5166 -3937.8972 4730.5127 -3937.9482 4730.5103 C-3937.9968 4730.5381 -3938.0437 4730.5669 -3938.0857 4730.5967 C-3937.9868 4730.5669 -3937.8865 4730.5415 -3937.7876 4730.5205 Cf/BBAccumRotation (0.598766) XT-3939.3643 4730.7661 m-3939.0857 4730.8198 -3938.8188 4730.7871 -3938.5613 4730.7261 C-3938.7888 4730.6543 -3939.0532 4730.6519 -3939.3643 4730.7661 Cf/BBAccumRotation (0.598766) XT-3938.1079 4731 m-3938.2048 4730.8574 -3938.2524 4730.708 -3938.0923 4730.5996 c-3938.0903 4730.5977 -3938.0884 4730.5977 -3938.0857 4730.5967 C-3938.2429 4730.6421 -3938.3987 4730.6895 -3938.5613 4730.7261 C-3938.3911 4730.7822 -3938.2388 4730.8774 -3938.1079 4731 Cf/BBAccumRotation (0.598766) XT-3938.1079 4731 m-3938.0144 4731.1377 -3937.8655 4731.2671 -3937.8147 4731.3467 c-3937.8999 4731.2192 -3937.9983 4731.1021 -3938.1079 4731 Cf/BBAccumRotation (0.598766) XT-3938.5056 4734.3921 m-3938.6648 4734.499 -3938.6272 4733.5391 -3938.9419 4733.7534 C-3939.6799 4734.0225 -3940.3113 4734.4541 -3941.0024 4734.4561 C-3941.3169 4734.6719 -3941.8132 4733.6064 -3942.1272 4733.8213 C-3942.8677 4734.0913 -3944.7563 4735.3809 -3943.6433 4735.3232 c-3941.9692 4735.1807 -3940.8777 4734.9209 -3939.3755 4734.7437 C-3938.1548 4734.3584 -3936.9812 4733.8999 -3935.7312 4733.5518 C-3935.3811 4733.5063 -3935.0544 4733.5806 -3934.7251 4733.6455 C-3935.1548 4733.4961 -3935.5945 4733.3486 -3936.0825 4733.207 C-3936.7251 4732.9424 -3937.5005 4734.1729 -3938.5056 4734.3921 Cf/BBAccumRotation (0.598766) XT-3929.3716 4731.1997 m-3929.5281 4731.3081 -3929.8442 4731.5225 Y-3930.5471 4730.832 -3931.2856 4731.1021 -3932.0239 4731.3721 C-3931.9165 4731.5313 -3931.8071 4731.6919 -3931.6963 4731.8511 C-3931.2739 4731.7959 -3931.2251 4731.5278 -3931.6001 4731.3184 C-3930.7407 4731.9014 -3929.9282 4731.9912 -3929.0959 4731.8936 C-3929.1479 4731.6328 -3929.1372 4731.3325 -3929.3716 4731.1997 Cf/BBAccumRotation (0.598766) XT-3928.6079 4731.8145 m-3928.7712 4731.8457 -3928.9353 4731.8726 -3929.0959 4731.8936 C-3929.0923 4731.9209 -3929.0845 4731.9478 -3929.0784 4731.9766 C-3928.9143 4731.9287 -3928.7505 4731.8809 -3928.5903 4731.8374 C-3928.5959 4731.8296 -3928.6021 4731.8223 -3928.6079 4731.8145 Cf/BBAccumRotation (0.598766) XT-3942.7097 4731.644 m-3944.8071 4731.6831 -3946.7815 4731.6367 -3948.7097 4731.5435 C-3948.8579 4731.7305 -3948.9617 4731.9473 -3949.1609 4731.835 C-3949.3113 4731.6685 -3949.4631 4731.5625 -3949.6135 4731.4927 C-3949.8953 4731.4775 -3950.1765 4731.4604 -3950.4556 4731.4424 C-3950.5532 4731.4639 -3950.6521 4731.4902 -3950.7524 4731.5176 C-3950.7537 4731.519 -3950.7583 4731.5205 -3950.7605 4731.5225 c-3950.9185 4731.6309 -3950.8716 4731.7793 -3950.7739 4731.9209 C-3950.6648 4732.0225 -3950.5647 4732.1421 -3950.4792 4732.2686 c-3950.5337 4732.188 -3950.6785 4732.0591 -3950.7739 4731.9209 C-3950.9067 4731.7993 -3951.0544 4731.7031 -3951.2273 4731.6484 C-3951.4839 4731.7085 -3951.7524 4731.7432 -3952.0295 4731.687 C-3951.7212 4731.5742 -3951.4556 4731.5742 -3951.2273 4731.6484 C-3951.0647 4731.6104 -3950.9087 4731.5625 -3950.7524 4731.5176 C-3950.7075 4731.4873 -3950.6624 4731.4604 -3950.6155 4731.4307 C-3951.2583 4731.3896 -3951.8972 4731.3423 -3952.5369 4731.2935 C-3952.6841 4731.3184 -3952.8247 4731.3398 -3952.9392 4731.3721 c-3953.4028 4731.5005 -3953.8647 4731.6289 -3954.1509 4731.1631 C-3954.2639 4731.1553 -3954.3792 4731.1455 -3954.4944 4731.1333 C-3954.4731 4731.1631 -3954.4497 4731.1865 -3954.4282 4731.2192 C-3954.4792 4731.1904 -3954.5222 4731.1592 -3954.5571 4731.1289 C-3955.0396 4731.0894 -3955.5239 4731.0479 -3956.0105 4731.0054 C-3956.3247 4731.1865 -3956.6487 4731.4136 -3956.9731 4731.5503 C-3957.1919 4731.231 -3957.2993 4731.0713 V-3957.4312 4731.311 -3957.6196 4731.4692 -3957.8403 4731.5503 C-3957.5784 4731.8374 -3957.3403 4732.1543 -3957.1177 4732.3511 C-3956.7915 4732.8311 -3956.3892 4731.3877 -3956.0044 4732.2935 c-3956.3892 4731.3877 -3956.7915 4732.8311 -3957.1177 4732.3511 C-3957.3403 4732.1543 -3957.5784 4731.8374 -3957.8403 4731.5503 C-3958.2993 4731.7217 -3958.8933 4731.5503 -3959.3716 4731.0825 C-3958.7776 4730.6768 -3958.2776 4731.0688 -3957.8403 4731.5503 C-3957.6196 4731.4692 -3957.4312 4731.311 -3957.2993 4731.0713 C-3957.1919 4731.231 -3956.9731 4731.5503 Y-3956.6487 4731.4136 -3956.3247 4731.1865 -3956.0105 4731.0054 C-3956.9597 4730.9224 -3957.9185 4730.8398 -3958.8987 4730.7583 c-3965.2031 4730.1465 -3971.0176 4730.2549 -3977.5583 4729.8037 c-3981.1016 4729.5264 -3984.5056 4729.1152 -3987.8442 4728.5527 c-3994.5022 4727.4336 -4000.5759 4728.7192 -4007.3025 4726.2974 c-4009.8843 4725.4478 -4014.6763 4725.9077 -4017.1653 4726.0078 C-4020.5 4727.6016 -4018.7712 4731.7217 -4018.6145 4731.9541 C-4016.5647 4735.4648 -4014.9607 4733.5161 -4010.7839 4735.5791 C-4013.6289 4734.4072 -4008.6848 4733.3188 -4005.9983 4735.7246 c-4002.1111 4739.3896 -3996.5671 4736.4585 -3991.7712 4737.396 c-3990.5723 4737.6309 -3989.2983 4737.4648 -3987.8647 4737.5381 C-3980.4336 4738.7847 -3973.5295 4737.2329 -3965.7161 4737.5166 C-3963.6453 4737.5063 -3961.8264 4736.6167 -3960.0825 4736.1289 C-3958.8091 4735.9639 -3957.4482 4736.4351 -3956.4128 4736.4336 c-3954.7849 4736.4253 -3953.3833 4736.0889 -3952.0415 4735.6665 C-3953.5415 4735.8423 -3954.6372 4736.1001 -3956.3091 4736.2446 c-3957.4243 4736.3037 -3955.5337 4735.0137 -3954.7952 4734.7427 C-3954.4792 4734.5278 -3953.9829 4735.5933 -3953.6665 4735.3774 C-3952.9792 4735.3765 -3952.3479 4734.9453 -3951.6101 4734.6743 C-3951.2937 4734.46 -3951.3303 4735.4209 -3951.1724 4735.3145 C-3950.1665 4735.0967 -3949.3911 4733.8647 -3948.7483 4734.1279 C-3948.2605 4734.2705 -3947.8201 4734.4185 -3947.3911 4734.5664 C-3947.1196 4734.6191 -3946.8501 4734.6621 -3946.5632 4734.6245 C-3946.3853 4734.5439 -3946.2007 4734.4639 -3946.0161 4734.3833 C-3946.1624 4734.0894 -3946.2151 4733.7305 -3946.2639 4733.3687 C-3945.9983 4733.4209 -3945.6235 4733.6333 -3945.3579 4733.6865 c-3945.6235 4733.6333 -3945.9983 4733.4209 -3946.2639 4733.3687 C-3946.2151 4733.7305 -3946.1624 4734.0894 -3946.0161 4734.3833 C-3944.6919 4733.8198 -3943.1648 4733.3125 -3941.7449 4732.8984 C-3941.7505 4732.8721 -3941.7583 4732.8423 -3941.7639 4732.8135 C-3942.5945 4732.9111 -3943.4041 4732.8232 -3944.2661 4732.2393 C-3943.8933 4732.4512 -3943.9392 4732.7173 -3944.3643 4732.7744 C-3944.4731 4732.6152 -3944.5825 4732.4541 -3944.6899 4732.2949 C-3943.9497 4732.0249 -3943.2112 4731.7534 -3942.5105 4732.4453 C-3942.1936 4732.2305 -3942.0369 4732.1221 V-3941.8025 4732.2549 -3941.8132 4732.5566 -3941.7639 4732.8135 C-3941.6021 4732.7959 -3941.4382 4732.7686 -3941.2739 4732.7373 C-3941.6196 4732.2598 -3942.7097 4731.644 Yf/BBAccumRotation (0.598766) XT-3951.2463 4731.6206 m-3951.1333 4731.5894 -3950.9944 4731.5679 -3950.8464 4731.5439 C-3951.3833 4731.5015 -3951.9204 4731.4585 -3952.4597 4731.4136 C-3952.1743 4731.8799 -3951.7112 4731.7505 -3951.2463 4731.6206 cf/BBAccumRotation (0.598766) XTUUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed 20)0 Auu0 J 0 j 1 w 4 M []0 d0 XR-4020.5 4739.3247 m-3806.8999 4739.3247 L-3806.8999 4731.5239 L-4020.5 4731.5239 L-4020.5 4739.3247 Ln0 O0 0 0 1 k-4020.5 4735.4248 m-4010.4856 4737.9165 -4003.6863 4739.2646 -3991.7007 4739.3247 c-3978.7185 4739.3896 -3913.6997 4739.3247 y-3848.6816 4739.3896 -3835.6997 4739.3247 v-3823.7124 4739.2646 -3816.9136 4737.9165 -3806.8999 4735.4248 C-3816.9136 4732.9331 -3823.7124 4731.5854 -3835.6997 4731.5239 c-3848.6816 4731.4585 -3913.6997 4731.5239 y-3978.7185 4731.4585 -3991.7007 4731.5239 v-4003.6863 4731.5854 -4010.4856 4732.9331 -4020.5 4735.4248 CfUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 10 pt \221\310\211~/ Adobe ArtOnPath Br) -(ush Tool/ \220\374 \(\220\346\215\327\)/ Adobe ArtOnPath Brush Tool/ \203J\203\212\203O\203\211\203t\203B/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(10 pt \621\710\611~)(1 10 10 75 75 -20 110 1 0 1 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(\603J\603\612\603O\603\611\603t\603B)(1 / Unnamed 11/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(\620\774 \(\620\746\615\727\))(1 / Unnamed 20/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623]) 0 Xs([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])Pc0 0 0 0 k(\603z\603\617\603C\603g)Pc0 0 0 1 k(\603u\603\611\603b\603N)Pc0 1 1 0 k(CMYK \603\614\603b\603h)Pc0 0 1 0 k(CMYK \603C\603G\603\615\601[)Pc1 0 1 0 k(CMYK \603O\603\612\601[\603\623)Pc1 0 0 0 k(CMYK \603V\603A\603\623)Pc1 1 0 0 k(CMYK \603u\603\613\601[)Pc0 1 0 0 k(CMYK \603}\603[\603\623\603^)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb0 0 0 0 Bh2 (\603X\601[\603o\601[\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603X\601[\603o\601[\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)PcBb2 (\603G\603b\603W\602\711\603t\603F\601[\603h) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603G\603b\603W\602\711\603t\603F\601[\603h)PcBb0 0 0 0 Bh2 (\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623)PcBb2 (\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623)Pc(\603N\603\615\603X\603p\603^\601[\603\623) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(\603N\603\615\603X\603p\603^\601[\603\623)Pc0 0 0 1 k(C=0 M=0 Y=0 K=100)Pc0 0 0 0.899994 k(C=0 M=0 Y=0 K=90)Pc0 0 0 0.799988 k(C=0 M=0 Y=0 K=80)Pc0 0 0 0.699997 k(C=0 M=0 Y=0 K=70)Pc0 0 0 0.599991 k(C=0 M=0 Y=0 K=60)Pc0 0 0 0.5 k(C=0 M=0 Y=0 K=50)Pc0 0 0 0.399994 k(C=0 M=0 Y=0 K=40)Pc0 0 0 0.299988 k(C=0 M=0 Y=0 K=30)Pc0 0 0 0.199997 k(C=0 M=0 Y=0 K=20)Pc0 0 0 0.099991 k(C=0 M=0 Y=0 K=10)Pc0 0 0 0.049988 k(C=0 M=0 Y=0 K=5)Pc0.1 0.7 0.8 0 k(C=10 M=70 Y=80 K=0)Pc0.1 0.5 0.8 0 k(C=10 M=50 Y=80 K=0)Pc0.65 0.1 1 0 k(C=65 M=10 Y=100 K=0)Pc0.5 0.9 0.1 0 k(C=50 M=90 Y=10 K=0)Pc0.25 0.85 0.6 0.1 k(C=25 M=85 Y=60 K=10)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(\203\214\203C\203\204\201[ 1) Ln0 Auuu0 O0.34 0.53 1 0 k0 J 0 j 1 w 4 M []0 d0 XR393.627 436.1431 m393.4531 435.9927 393.3535 435.7729 393.3535 435.5425 C393.3535 433.0244 L393.3535 432.6313 393.6416 432.2969 394.0303 432.2383 C408.6338 430.0386 L408.6914 430.0308 408.7471 430.0283 408.8057 430.0313 C408.8301 430.019 408.8594 430.0034 408.8926 429.9854 c409.0078 429.9248 409.0645 429.791 409.0225 429.668 c409 429.5977 408.9561 429.5557 408.917 429.5293 C394.6289 419.5586 L394.4258 419.7109 394.1592 419.7637 393.9102 419.6826 c393.5791 419.5791 393.3535 419.2725 393.3535 418.9248 C393.3535 414.667 L393.3535 414.3682 393.5195 414.0947 393.7861 413.959 c393.9004 413.9004 394.0244 413.8711 394.1484 413.8711 c394.3125 413.8711 394.4736 413.9219 394.6123 414.0215 C418.8467 431.4316 L419.1094 431.6206 419.2314 431.9517 419.1543 432.2666 c419.0762 432.582 418.8154 432.8188 418.4941 432.8647 C394.2607 436.3301 L394.0283 436.3613 393.8008 436.2939 393.627 436.1431 cf393.7803 420.1353 m393.8965 420.0752 394.0225 420.0454 394.1484 420.0454 c394.3076 420.0454 394.4678 420.0933 394.6025 420.188 C406.4385 428.4468 L406.7051 428.6338 406.832 428.9634 406.7568 429.2798 c406.6826 429.5962 406.4219 429.835 406.1006 429.8838 C394.2666 431.667 L394.0352 431.7017 393.8047 431.6343 393.6289 431.4829 c393.4551 431.332 393.3535 431.1118 393.3535 430.8804 C393.3535 420.8403 L393.3535 420.5444 393.5166 420.2725 393.7803 420.1353 cf390.9365 477.7139 m390.9365 462.8267 L390.9365 462.5264 391.1045 462.252 391.374 462.1167 c391.4854 462.0596 391.6104 462.0313 391.7324 462.0313 c391.8975 462.0313 392.0635 462.084 392.2041 462.1865 C395.6377 464.7212 L395.8408 464.8711 395.9609 465.1074 395.9609 465.3599 C395.9912 480.2505 L395.9912 480.5498 395.8242 480.8247 395.5566 480.9604 c395.2871 481.0967 394.9688 481.0708 394.7266 480.8931 C391.2617 478.355 L391.0566 478.2056 390.9365 477.9673 390.9365 477.7139 Cf0.429688 0.535156 0.992188 0.007813 k389.7129 478.1079 m383.6045 478.9028 L383.3789 478.9355 383.1484 478.8628 382.9766 478.7119 c382.8047 478.5605 382.708 478.3433 382.708 478.1143 C382.708 462.7285 L382.708 462.3286 383.0039 461.9912 383.3994 461.9399 C389.5078 461.145 L389.543 461.1406 389.5762 461.1387 389.6113 461.1387 c389.8018 461.1387 389.9902 461.208 390.1357 461.3364 c390.3076 461.4873 390.4072 461.7046 390.4072 461.9336 C390.4072 477.3198 L390.4072 477.7192 390.1104 478.0566 389.7129 478.1079 Cf0.34 0.53 1 0 k388.2676 482.8237 m388.0791 482.8428 387.8926 482.7925 387.7393 482.6851 C384.8467 480.6719 L384.5781 480.4839 384.4512 480.1494 384.5283 479.8306 c384.6064 479.5112 384.8721 479.2729 385.1992 479.2305 C390.2842 478.5688 L390.3203 478.5645 390.3525 478.562 390.3887 478.562 c390.5557 478.562 390.7217 478.6152 390.8584 478.7158 C393.8506 480.9077 L394.1152 481.103 394.2334 481.4419 394.1465 481.7603 c394.0596 482.0786 393.7842 482.3096 393.4551 482.3408 C393.3389 482.3516 L393.2705 482.3589 393.2002 482.3564 393.1299 482.3438 c393.1172 482.3418 393.0801 482.3325 393.043 482.3242 C393.0244 482.3276 393.0039 482.3345 392.9824 482.3438 c392.9043 482.3779 392.8213 482.3999 392.7363 482.4072 C388.2676 482.8237 Lf220.4585 431.1328 m220.2314 431.2422 219.9648 431.2349 219.7427 431.1167 C217.7305 430.0405 L217.4546 429.8931 217.291 429.5977 217.3115 429.2861 c217.333 428.9736 217.5347 428.7031 217.8276 428.5942 c218.3149 428.4126 218.7861 428.2085 219.228 427.9873 c219.6152 427.793 219.9834 427.5771 220.3447 427.3545 c220.4731 427.2754 220.6177 427.2358 220.7622 427.2358 c220.9385 427.2358 221.1143 427.2944 221.2583 427.4097 c221.521 427.6196 221.623 427.9717 221.5142 428.2891 c221.2495 429.0605 221.042 429.8271 220.8984 430.5674 c220.8496 430.8145 220.687 431.0249 220.4585 431.1328 cf0.65 0.08 0.95 0 k223.6084 424.9702 m223.6235 424.791 223.6978 424.6221 223.8213 424.4912 c224.6396 423.6182 225.4209 422.6201 226.1431 421.5239 c226.2925 421.2969 226.5435 421.166 226.8071 421.166 c226.8662 421.166 226.9258 421.1729 226.9854 421.1865 c227.3086 421.2603 227.5518 421.5278 227.5957 421.8574 c227.9106 424.2446 228.7217 427.6812 230.7939 430.4922 c230.9526 430.707 230.9927 430.9883 230.8999 431.2393 c230.2158 433.0923 227.6396 439.2324 223.1924 440.4111 c222.8042 440.5151 222.3999 440.3105 222.2505 439.9365 c221.3398 437.6553 219.646 431.6411 223.5815 425.0825 c223.5986 425.0542 223.605 425.0059 223.6084 424.9702 cf0.429688 0.535156 0.992188 0.007813 k369.2881 480.7705 m366.3516 481.1387 349.4023 483.2939 239.127 497.3145 C223.5103 499.3003 L223.2793 499.3286 223.0552 499.2593 222.8848 499.1084 c222.7134 498.9575 222.6147 498.7397 222.6147 498.5117 C222.6147 484.3408 L222.6147 483.9429 222.9087 483.6064 223.3032 483.5532 C369.082 463.8091 L369.1172 463.8047 369.1543 463.8018 369.1895 463.8018 c369.3809 463.8018 369.5674 463.8706 369.7119 463.998 c369.8848 464.1494 369.9844 464.3677 369.9844 464.5972 C369.9854 479.9805 L369.9854 480.3818 369.6875 480.7207 369.2881 480.7705 cf0.847656 0.40625 0.828125 0.023438 k345.2197 405.3018 m342.2744 404.6055 339.4941 403.4375 336.875 401.8125 C336.6826 401.7617 336.5156 401.6406 336.4082 401.4736 c333.3916 396.8057 331.3105 392.2998 330.2256 388.0811 c330.1484 387.7852 330.249 387.4707 330.4844 387.2734 c330.6289 387.1514 330.8115 387.0879 330.9941 387.0879 c331.1055 387.0879 331.2178 387.1113 331.3223 387.1592 c332.376 387.6387 333.082 387.7168 333.8145 387.46 c334.2295 387.3154 334.6797 387.5303 334.8262 387.9424 c335.7598 390.5566 339.3174 399.4316 345.8486 403.8711 c346.166 404.0859 346.2832 404.498 346.1309 404.8486 c345.9746 405.2002 345.5879 405.3926 345.2197 405.3018 cf0 0.8 0.58 0 k340.793 405.9736 m340.2598 406.1064 L339.9531 406.1797 339.6328 406.0625 339.4424 405.8115 C339.0986 405.3496 L339.6846 404.8057 L339.0449 405.2793 L338.8291 404.9873 338.8398 404.5859 339.0674 404.3047 c339.2227 404.1143 339.4502 404.0107 339.6855 404.0107 c339.7959 404.0107 339.9092 404.0342 340.0156 404.082 c340.3135 404.2188 340.6113 404.3447 340.9063 404.4668 c341.2236 404.5986 341.4209 404.9189 341.3945 405.2617 c341.3701 405.6045 341.127 405.8906 340.793 405.9736 Cf0.85 0.25 0.83 0 k345.71 414.9971 m345.4785 415.3076 345.0557 415.4063 344.7119 415.2314 c328.5439 407.0225 325.6865 391.8535 325.2783 388.8955 c325.2363 388.5996 325.3662 388.3037 325.6123 388.1328 c325.9502 387.8994 326.2002 387.5273 326.334 387.3281 c326.5664 386.9844 326.8057 386.6279 327.1689 386.4004 c327.5488 386.1631 327.9346 386.0479 328.3516 386.0479 c328.4639 386.0479 328.5791 386.0566 328.6992 386.0732 c329.0303 386.1211 329.2969 386.3721 329.3633 386.7002 c331.6895 398.0361 340.5635 408.6543 345.6465 413.9736 c345.915 414.2539 345.9414 414.6865 345.71 414.9971 cf318.8623 387.5615 m318.9063 387.5615 318.9521 387.5645 318.998 387.5723 c319.335 387.6309 319.6865 387.6416 320.0244 387.6016 c320.2529 387.5742 320.4717 387.6426 320.6426 387.791 c320.8125 387.9385 320.9111 388.1523 320.915 388.3779 c320.9678 391.7783 320.7705 395.375 320.3281 399.0654 c320.3076 399.2363 320.1777 399.4355 320.0596 399.5596 C320.0176 399.6338 315.7568 407.0361 307.4238 410.8037 c307.0879 410.9551 306.6943 410.8564 306.4688 410.5674 c306.2432 410.2773 306.2451 409.8711 306.4736 409.584 c309.874 405.3037 315.9063 396.8311 318.0918 388.1621 c318.1816 387.8037 318.5039 387.5615 318.8623 387.5615 cf0 0.06 0.57 0 k264.2993 394.0498 m265.3643 394.0498 266.3794 394.2969 267.1577 394.7471 c268.1519 395.3232 268.8511 396.0996 269.5283 396.8496 c270.6719 398.1162 271.8545 399.4268 274.4033 399.6465 c276.457 399.8242 277.623 399.2861 279.1294 398.4707 c280.0527 397.9717 280.7822 397.5771 281.5913 397.5771 c281.998 397.5771 282.3887 397.6748 282.7842 397.8779 c285.4033 399.21 286.4092 402.5957 286.2437 405.3594 c286.1162 407.4902 285.7104 408.792 283.9336 409.5625 c283.6362 409.6914 283.3101 409.7988 282.9238 409.9248 c281.3135 410.4482 279.9985 411.0352 280.2231 412.9238 c280.3608 414.0781 281.0034 414.8789 281.6255 415.6533 c282.3647 416.5762 283.063 417.4463 282.939 418.8916 c282.7832 420.7148 281.5337 422.6348 279.7568 423.7842 c278.4277 424.6431 276.6821 425.1157 274.8403 425.1157 c272.7344 425.1157 270.7061 424.4907 269.2754 423.4009 c268.04 422.4609 267.5557 421.1284 267.0859 419.8379 c266.4307 418.0332 265.7529 416.1689 262.9805 415.7607 c262.3833 415.6738 261.7168 415.6348 260.8198 415.6348 c260.4189 415.6348 260.0122 415.6426 259.5957 415.6504 c256.6719 415.707 253.4824 415.8838 251.9775 412.7256 c251.3599 411.4307 251.2051 410.4258 251.5034 409.6523 c251.9375 408.5273 253.3022 407.9668 254.748 407.3721 c255.9048 406.8975 257.1016 406.4053 257.9277 405.5771 c259.1714 404.3301 259.5244 403.3848 259.4399 401.5332 c259.4126 400.959 259.2744 400.4316 259.126 399.8643 c258.9243 399.0957 258.7334 398.3711 258.8936 397.6455 c259.4375 395.1758 262.0771 394.0498 264.2993 394.0498 cf0.5 0.78 1 0 k255.1533 399.8408 m255.7695 399.4854 256.4897 399.1309 257.356 398.7588 c257.4565 398.7158 257.563 398.6943 257.6699 398.6943 c257.7944 398.6943 257.9189 398.7236 258.0322 398.7822 c258.2427 398.8896 258.3945 399.085 258.4458 399.3174 c258.498 399.5508 258.5557 399.7803 258.6133 399.999 c258.7471 400.5078 258.8857 401.0361 258.9097 401.5576 c258.9668 402.7861 258.8579 403.6299 258.1216 404.5654 c257.8521 404.9082 257.355 404.9707 257.0093 404.7012 c256.7905 404.5313 256.5635 404.3857 256.3384 404.25 c255.9023 403.9893 255.4521 403.7178 255.2148 403.3242 c254.9766 402.9316 254.7095 402.1572 254.7715 400.6836 C254.7651 400.6465 254.7593 400.6055 254.7578 400.5811 c254.7383 400.2803 254.8916 399.9922 255.1533 399.8408 cf0.65 0.08 0.95 0 k227.9717 408.9619 m228.0376 408.749 228.1895 408.5752 228.3892 408.4805 c230.4653 407.4922 232.5381 406.9922 234.5498 406.9922 c239.123 406.9922 242.4355 409.5732 244.0024 411.1113 c244.1914 411.2969 244.2759 411.5635 244.2271 411.8232 c244.1787 412.083 244.0044 412.3027 243.7617 412.4082 c241.0376 413.5879 238.5342 414.1865 236.3193 414.1865 c231.2363 414.1865 228.8374 410.9756 228.0415 409.5957 c227.9312 409.4043 227.9058 409.1738 227.9717 408.9619 cf0.5 0.78 1 0 k245.7661 411.1084 m245.4443 411.3711 244.9731 411.3418 244.6855 411.04 c243.9141 410.2275 242.6221 409.0586 240.8535 408.0996 c240.4966 407.9053 240.3428 407.4736 240.4971 407.0986 c240.6226 406.7939 240.9175 406.6055 241.2329 406.6055 c241.3057 406.6055 241.3804 406.6143 241.4541 406.6367 c243.5645 407.2461 245.3647 407.9805 246.8047 408.8154 c247.0386 408.9521 247.187 409.1963 247.1997 409.4678 c247.2119 409.7373 247.0864 409.9961 246.8662 410.1514 c246.6465 410.3076 246.4424 410.4941 246.2471 410.6777 c246.1206 410.7979 245.9365 410.9668 245.7661 411.1084 cf0.65 0.58 0.7 0 k247.3223 410.3955 m247.4097 410.1484 247.6133 409.9609 247.8657 409.8926 c247.9336 409.875 248.0024 409.8652 248.0713 409.8652 c248.2588 409.8652 248.4419 409.9316 248.5879 410.0557 c249.8789 411.1602 250.5337 412.3164 250.5337 413.4932 c250.5337 415.0762 249.3564 416.6367 247.1299 418.0039 c246.7817 418.2168 246.3257 418.1318 246.0791 417.8057 c245.165 416.5957 244.1211 415.5059 242.9766 414.5684 c242.7588 414.3906 242.6519 414.1094 242.6948 413.8311 c242.7378 413.5537 242.9248 413.3184 243.186 413.2139 c243.9414 412.9141 244.6387 412.6064 245.3174 412.2734 c245.3506 412.2568 245.3901 412.2031 245.4219 412.1318 c245.4878 411.9814 245.5981 411.8564 245.7378 411.7725 c246.0547 411.5801 246.3413 411.3174 246.6094 411.0645 c246.8716 410.8184 247.0557 410.6484 247.23 410.5361 c247.2661 410.5137 247.2969 410.4658 247.3223 410.3955 cf0.78 0.25 0.95 0 k249.7642 470.6938 m249.5332 470.6938 249.314 470.5933 249.1626 470.4185 c249.0117 470.2441 248.9443 470.0122 248.9775 469.7832 c249.2808 467.7153 250.6318 462.8921 256.6216 462.7808 c256.6265 462.7808 256.6318 462.7808 256.6367 462.7808 c257.0469 462.7808 257.3906 463.0933 257.4287 463.5034 c257.5288 464.6035 257.8579 465.7476 258.4063 466.9043 c258.5479 467.2031 258.4902 467.5581 258.2607 467.7964 c256.4116 469.7192 253.562 470.6938 249.7642 470.6938 cf0.87 0 0.75 0 k369.542 444.5054 m369.2715 444.6396 368.9482 444.6089 368.708 444.4263 c367.668 443.6362 366.2871 442.5479 364.8379 441.1343 c364.6406 440.9419 364.4092 440.7246 364.1436 440.4785 c362.8535 439.2739 360.6943 437.2588 360.0703 435.4004 c360.0127 435.2285 360.0146 435.0425 360.0771 434.873 c360.0908 434.8345 360.1104 434.7563 360.0684 434.6699 C359.9629 434.4497 L359.9219 434.3643 359.8965 434.2729 359.8887 434.1787 c359.5557 430.4868 358.6426 427.3467 357.0977 424.5771 c356.7842 424.0161 355.6787 422.3423 354.2578 420.752 c354.1133 420.5894 354.041 420.374 354.0596 420.1567 c354.0771 419.939 354.1836 419.7393 354.3535 419.6025 c354.6221 419.3867 354.9385 419.249 355.293 419.1943 c355.4307 419.1729 355.5752 419.1611 355.7246 419.1611 c357.7334 419.1611 360.5264 421.1279 361.7227 422.168 c364.0469 424.189 365.6201 426.0649 366.8232 428.2451 C367.2549 429.0142 L368.4121 431.0576 369.6729 433.3467 369.9648 434.6543 c369.9775 434.7119 369.9844 434.7695 369.9844 434.8281 C369.9844 443.793 L369.9844 444.0947 369.8135 444.3711 369.542 444.5054 cf0.847656 0.40625 0.828125 0.023438 k334.3467 422.2847 m334.0928 422.4917 333.7383 422.5234 333.4531 422.3628 c332.0664 421.5835 330.8086 420.5137 329.7158 419.1836 c329.6621 419.1201 329.6182 419.0449 329.5869 418.9668 c329.5771 418.9395 329.5664 418.916 329.5557 418.8984 C329.5293 418.8828 329.5049 418.8672 329.4922 418.8574 c329.4238 418.8115 329.3643 418.7529 329.3154 418.6865 c326.3076 414.7031 325.7754 410.0459 325.7354 409.9092 C325.6348 409.71 325.6201 409.4775 325.6982 409.2686 c326.7822 406.3496 327.4873 403.6338 327.8877 401.8691 c327.959 401.5518 328.2178 401.3096 328.5391 401.2598 c328.5811 401.2539 328.6221 401.25 328.6621 401.25 c328.9414 401.25 329.2031 401.3965 329.3467 401.6426 c329.6768 402.2002 330.0283 402.7627 330.4043 403.3281 c330.5439 403.5371 330.5752 403.8018 330.4902 404.0381 c330.459 404.1211 330.4609 404.1563 330.4629 404.168 c332.0293 412.9492 333.7266 418.748 334.5986 421.4233 c334.7002 421.7349 334.6006 422.0767 334.3467 422.2847 cf0 0.8 0.58 0 k318.2705 402.9883 m318.4248 402.7979 318.6543 402.6963 318.8867 402.6963 c318.998 402.6963 319.1094 402.7197 319.2148 402.7676 c319.543 402.916 319.7305 403.2686 319.6709 403.623 c319.5156 404.5479 319.3496 405.4531 319.1758 406.3359 c319.0947 406.751 318.7012 407.0283 318.2842 406.9707 c317.7031 406.8877 317.1279 406.7988 316.5586 406.6992 c316.2666 406.6484 316.0264 406.4385 315.9375 406.1563 c315.8467 405.873 315.9229 405.5635 316.1318 405.3535 c316.8789 404.6074 317.5977 403.8105 318.2705 402.9883 cf0.34 0.53 1 0 k300.7773 402.666 m300.5479 402.5664 300.2988 402.4893 300.0234 402.4277 c299.7969 402.3779 299.5908 402.2129 299.4805 402.0088 c299.3242 401.7188 299.3652 401.3604 299.5811 401.1104 c299.6006 401.0879 299.6152 401.0615 299.6279 401.0283 c299.7178 400.7754 299.9326 400.584 300.1943 400.5225 c300.2559 400.5078 300.3154 400.501 300.377 400.501 c300.5791 400.501 300.7773 400.5781 300.9277 400.7227 c301.1396 400.9258 301.3652 401.127 301.6016 401.3252 c301.9033 401.5781 301.9746 402.0146 301.7666 402.3496 c301.5625 402.6855 301.1436 402.8193 300.7773 402.666 cf0 0.06 0.57 0 k300.9648 403.3438 m302.1377 404.0117 302.9619 405.291 303.0654 406.6064 c303.1689 407.915 302.4219 409.0537 301.6973 410.1543 c300.8135 411.502 299.8994 412.8955 300.6816 414.5166 c301.4541 416.1162 303.0928 416.6807 304.6777 417.2266 c306.207 417.7549 307.6523 418.2539 308.124 419.6455 c308.8896 421.9067 307.3438 424.4287 306.3545 425.7305 c304.7686 427.8169 303.4248 428.4287 300.9404 428.2471 c298.8589 428.0923 297.9521 427.2295 296.5767 425.9209 c296.374 425.7271 296.1611 425.5249 295.9331 425.314 C295.708 425.106 L295.6362 425.0405 295.5776 424.9619 295.5342 424.874 c295.5112 424.8281 295.4668 424.7676 295.3867 424.7407 c295.293 424.7095 295.2056 424.6611 295.1289 424.5972 c293.5601 423.29 292.4141 423.0698 291.1763 423.8335 c290.1597 424.4609 289.7144 425.6416 289.2837 426.7837 c288.7378 428.228 288.2222 429.5923 286.6064 429.5923 c286.2769 429.5923 285.8989 429.5342 285.4517 429.4131 c284.1904 429.0732 282.1152 427.4111 281.5991 425.4775 c281.292 424.3291 281.5918 423.2905 282.4907 422.3916 c282.5796 422.3022 282.5562 422.1802 282.5425 422.1318 c282.4824 421.9248 282.5088 421.7026 282.6157 421.5151 c283.1011 420.6675 283.3955 419.7764 283.4678 418.9375 c283.6094 417.2793 282.7749 416.2393 282.0376 415.3203 c281.437 414.5723 280.8696 413.8643 280.75 412.8623 c280.5576 411.2529 281.73 410.8701 283.0884 410.4277 c283.4531 410.3096 283.8149 410.1904 284.144 410.0488 c285.5308 409.4473 286.2856 408.4844 286.5923 406.9268 c286.6343 406.7129 286.7617 406.5254 286.9453 406.4092 c287.1294 406.293 287.3511 406.2559 287.5635 406.3076 c288.1118 406.4434 288.6733 406.8486 289.3296 407.5801 c289.6064 407.8877 289.7866 408.1758 289.9453 408.4287 c290.3989 409.1514 290.7144 409.5596 291.9355 409.5596 c292.0308 409.5596 292.1304 409.5566 292.231 409.5508 c294.4585 409.4258 295.0601 408.0332 295.667 406.0801 c296.0356 404.8945 296.3838 403.7754 297.4243 403.2627 c297.9785 402.9912 298.5547 402.8516 299.1367 402.8516 c299.7773 402.8516 300.3926 403.0176 300.9648 403.3438 cf0.65 0.58 0.7 0 k259.4243 440.0869 m259.0938 440.082 L258.7388 440.0806 258.4282 439.8438 258.332 439.502 c257.8096 437.6416 257.3579 435.7681 256.9902 433.9336 c256.9448 433.71 256.999 433.4775 257.1372 433.2959 c257.2754 433.1143 257.4849 433.0005 257.7129 432.9844 c258.7783 432.9087 259.7671 432.9648 260.6289 433.1836 c262.0845 433.5552 264.0215 433.9819 266.0957 433.9819 c268.1211 433.9819 270.0454 433.5879 271.978 432.7769 c273.4209 432.1709 274.5791 431.3799 275.7031 430.6118 c276.0771 430.3564 276.458 430.0972 276.855 429.8389 c276.9878 429.7529 277.1382 429.7104 277.2886 429.7104 c277.4712 429.7104 277.6528 429.7729 277.7998 429.897 c278.5288 430.5093 279.021 431.1606 279.2637 431.833 c279.2793 431.876 279.291 431.9199 279.2988 431.9648 C279.4263 432.6885 L279.4355 432.7412 279.4395 432.7944 279.438 432.8477 c279.3311 436.8394 270.353 440.0869 259.4243 440.0869 Cf240.3076 431.5342 m240.1069 431.2334 240.1338 430.8345 240.3745 430.564 c240.5298 430.3887 240.7012 430.2153 240.8931 430.0439 c241.0396 429.9136 241.228 429.8418 241.4229 429.8418 c241.4419 429.8418 241.4609 429.8423 241.4805 429.8442 c241.6953 429.8594 241.8945 429.9614 242.0322 430.1265 c242.5039 430.689 243.3662 431.2212 244.2417 431.7368 c244.4238 431.8438 244.5825 431.9375 244.6997 432.0142 c246.0234 432.873 247.6152 433.4287 249.5674 433.7134 c249.9946 433.7754 250.4365 433.8052 250.9185 433.8052 c251.9185 433.8052 252.9185 433.6777 254.1133 433.4858 c254.3398 433.4512 254.5762 433.5142 254.7529 433.6646 c254.9302 433.8145 255.0327 434.0347 255.0342 434.2666 c255.0435 435.8076 255.0938 437.3989 255.1846 438.9966 c255.1973 439.2285 255.1084 439.4546 254.9404 439.6157 c254.7729 439.7764 254.541 439.8584 254.312 439.833 c249.3101 439.3389 244.918 438.126 242.2612 436.5049 c242.0127 436.3535 241.8662 436.0776 241.8813 435.7861 c241.8965 435.4946 242.0693 435.2349 242.3325 435.1089 c242.376 435.0879 242.4331 435.0513 242.4624 434.9897 c242.5029 434.9063 242.4956 434.8066 242.4438 434.7295 C240.3076 431.5342 Lf255.6738 437.8545 m255.6543 437.4458 255.9492 437.0894 256.3535 437.0313 c256.3921 437.0254 256.4307 437.0229 256.4683 437.0229 c256.8286 437.0229 257.1509 437.2681 257.2397 437.6274 c257.3511 438.0771 257.4692 438.5405 257.5972 439.0166 c257.6631 439.2622 257.6069 439.5244 257.4478 439.7217 c257.2886 439.9189 257.0513 440.0249 256.79 440.0166 C256.499 440.0039 L256.0947 439.9819 255.772 439.6606 255.748 439.2568 c255.7192 438.7749 255.6943 438.3066 255.6738 437.8545 cf0.34 0.53 1 0 k263.7681 449.9771 m261.938 448.9741 L261.7861 448.8906 261.666 448.7607 261.5947 448.6025 c260.625 446.4458 259.7417 444.1055 258.9697 441.6475 c258.894 441.4072 258.937 441.145 259.0854 440.9409 c259.2344 440.7373 259.4712 440.6162 259.7236 440.6143 c269.312 440.5596 277.6455 437.9663 279.5386 434.4487 c279.6787 434.1899 279.9482 434.0303 280.2393 434.0303 c280.2593 434.0303 280.2803 434.0317 280.3008 434.0332 c280.6143 434.0576 280.8848 434.2646 280.9893 434.5615 c281.7134 436.6182 284.251 438.5459 288.1338 439.9878 c288.5234 440.1328 288.7358 440.5532 288.6211 440.9531 c288.1216 442.6934 287.7803 444.5039 287.4502 446.2544 C287.2612 447.2466 L287.1973 447.5776 286.9321 447.8325 286.5991 447.8828 C274.6211 449.6875 L274.3506 449.7246 274.0796 449.6274 273.9019 449.4219 c273.7236 449.2158 273.6631 448.9331 273.7412 448.6724 c274.1758 447.2266 274.4902 445.5508 274.6768 443.6919 c274.6899 443.5542 274.5942 443.4282 274.4604 443.4043 c274.4106 443.3955 273.9521 443.3193 273.2354 443.3193 c271.3276 443.3193 266.6973 443.9238 264.9077 449.522 c264.835 449.7485 264.6655 449.9302 264.4453 450.0181 c264.2246 450.1064 263.9771 450.0908 263.7681 449.9771 Cf0.78 0.25 0.95 0 k283.8872 467.2183 m282.3628 467.2183 281.0273 466.8921 280.1753 466.6191 c279.9019 466.5313 279.6968 466.3027 279.6392 466.0215 c279.5815 465.7397 279.6807 465.4492 279.8975 465.2607 c282.1909 463.2729 285.0171 462.2222 288.0693 462.2222 c289.0313 462.2222 289.9966 462.3242 290.9385 462.5249 c291.2168 462.584 291.4424 462.7871 291.5298 463.0581 c291.6167 463.3281 291.5532 463.625 291.3628 463.8359 c289.3311 466.0801 286.8164 467.2183 283.8872 467.2183 cf0.87 0 0.75 0 k362.332 457.27 m362.0664 457.4116 361.7441 457.3916 361.4971 457.2168 c357.1162 454.1074 354.4033 449.0552 353.1006 446.6274 c352.7588 445.9927 352.5205 445.5547 352.3242 445.2666 c352.208 445.0977 352.1611 444.8901 352.1953 444.6875 c352.4014 443.4409 352.5059 441.6104 352.4814 439.665 c352.4775 439.2822 352.7451 438.9502 353.1211 438.8755 c353.4951 438.7988 353.873 439.0034 354.0146 439.3594 c355.374 442.751 356.7842 445.9629 359.083 447.9868 c359.1328 448.0303 359.1943 448.0532 359.3604 448.0332 C359.4531 447.9946 359.5166 447.9048 359.5225 447.8052 c359.5771 446.9287 359.6387 446.0508 359.7012 445.1738 c359.835 443.2749 359.9863 441.1221 360.0313 439.0088 c360.0371 438.6802 360.2451 438.3906 360.5527 438.2783 c360.6426 438.2456 360.7354 438.23 360.8262 438.23 c361.0498 438.23 361.2695 438.3252 361.4238 438.501 c362.0918 439.2637 362.8242 439.9692 363.4541 440.5591 c363.6738 440.7651 363.7588 441.0781 363.6719 441.3677 c363.6611 441.4004 363.6494 441.4316 363.6367 441.4658 C362.6807 447.4453 362.6729 453.478 362.752 456.5479 c362.7607 456.8486 362.5977 457.1284 362.332 457.27 cf348.8574 453.2051 m348.501 454.1187 348.1406 455.0459 347.7969 455.9814 c347.6816 456.2964 347.3711 456.5039 347.0439 456.5015 c346.708 456.4985 346.4102 456.2847 346.2998 455.9673 c345.8389 454.6396 345.2441 453.3208 344.6709 452.0454 c343.7979 450.1079 342.9736 448.2778 342.5293 446.3623 c341.9873 444.0151 341.1045 436.8906 343.0586 434.6978 c343.0908 434.6621 343.1025 434.5938 343.1074 434.5425 c343.1221 434.3672 343.1953 434.2017 343.3145 434.0728 C343.542 433.8306 L343.6396 433.728 343.7363 433.625 343.833 433.5176 c345.1611 432.0376 346.3066 430.0259 346.8965 428.1367 c346.9941 427.8228 347.2754 427.6021 347.6025 427.5801 c347.6211 427.5791 347.6377 427.5786 347.6543 427.5786 c347.9629 427.5786 348.2471 427.7578 348.377 428.0405 c348.9238 429.2256 349.5869 430.3203 350.2715 431.4302 c350.5137 431.8232 350.7568 432.2144 350.9912 432.6074 c351.0391 432.6875 351.085 432.7729 351.1289 432.8589 C351.2031 432.9956 L351.3018 433.1724 351.3301 433.3804 351.2813 433.5771 c351.2637 433.645 351.2598 433.6992 351.2695 433.7275 c352.0889 435.9858 352.1484 442.6606 351.5664 445.1475 c350.9287 447.877 349.8828 450.5674 348.8574 453.2051 cf0.65 0.58 0.7 0 k336.0732 423.9419 m336.6182 424.1924 337.21 424.3535 337.8994 424.5313 c338.1436 424.5977 338.3428 424.7769 338.4326 425.0137 c338.5225 425.25 338.4961 425.5156 338.3574 425.7285 c338.1123 426.1094 337.8975 426.4614 337.7275 426.7515 c337.2734 427.5264 336.8555 428.3867 336.4512 429.3828 c336.2861 429.7881 335.8242 429.9814 335.4209 429.8218 c330.6797 427.9341 327.9619 425.3442 327.9619 422.7173 c327.9619 421.9653 328.1973 421.1909 328.6621 420.415 c328.79 420.2017 329.0107 420.0605 329.2578 420.0332 c329.2871 420.0303 329.3164 420.0288 329.3438 420.0288 c329.5615 420.0288 329.7715 420.1177 329.9219 420.2778 c331.501 421.9487 333.4004 423.1577 335.6729 423.8726 C335.8115 423.8569 335.9482 423.8843 336.0732 423.9419 cf0.5 0.78 1 0 k301.9033 432.6357 m301.8066 432.8276 301.6367 432.9712 301.4316 433.0361 c301.2266 433.1001 301.0049 433.0791 300.8164 432.9771 c297.7759 431.3359 295.3838 431.5181 293.209 433.3135 c292.8379 433.6196 292.4717 433.9673 292.0884 434.3765 c291.8228 434.6602 291.3921 434.7114 291.0669 434.4941 c291.0439 434.479 291.0181 434.4585 290.9927 434.437 C290.5659 434.1855 290.0034 433.9814 289.4092 433.7656 c287.8398 433.1948 286.0615 432.5488 286.2153 430.8213 c286.2495 430.4395 286.5508 430.1367 286.9321 430.1001 c288.4829 429.9526 289.1289 428.6694 289.7578 427.0386 C289.8408 426.7295 290.1021 426.499 290.4204 426.457 C290.4312 426.4556 290.4814 426.4517 290.5215 426.4487 C292.0347 425.9536 292.96 425.6812 294.7305 425.3589 c294.9741 425.3149 295.3481 425.4951 295.5322 425.665 c295.7998 425.9126 296.0107 426.1143 296.2124 426.3062 c297.563 427.5918 298.6294 428.6069 300.9004 428.7749 c303.5293 428.9692 305.0674 428.2988 306.7764 426.0508 c307.0557 425.6851 307.3301 425.2798 307.5713 424.8799 c307.7158 424.6411 307.9746 424.4961 308.2529 424.4961 c308.2627 424.4961 308.2754 424.4961 308.2871 424.4971 c314.4668 424.7666 320.0615 425.9009 324.042 427.6909 c324.2363 427.7788 324.3887 427.9414 324.4619 428.1431 c324.5371 428.3438 324.5254 428.5659 324.4336 428.7588 c324.4082 428.811 324.3936 428.8545 324.3965 428.8779 c324.4844 430.7866 322.7988 431.3232 321.1611 431.8438 c320.6895 431.9941 320.2012 432.1494 319.7168 432.3921 C319.4512 432.6362 319.0527 432.668 318.749 432.4722 c316.627 431.0977 314.4775 430.2505 312.1807 429.8809 c311.7793 429.8159 311.3291 429.7832 310.8408 429.7832 c307.8584 429.7832 304.0449 430.9692 301.9697 432.5425 c301.9492 432.5586 301.9268 432.5903 301.9033 432.6357 cf0.65 0.58 0.7 0 k289.2725 439.0024 m289.1152 439.4092 288.6582 439.6138 288.2515 439.4604 c283.8286 437.8022 281.292 435.5498 281.292 433.2817 c281.292 432.0376 282.0068 430.8267 283.4131 429.6851 C283.4336 429.6621 283.4551 429.6411 283.4746 429.624 c283.623 429.4932 283.811 429.4258 284 429.4258 c284.1299 429.4258 284.2612 429.4575 284.3809 429.5225 c284.6514 429.6699 284.9097 429.7847 285.1489 429.8628 c285.5088 429.98 285.7354 430.335 285.6919 430.7104 c285.458 432.7188 287.231 433.5371 289.2275 434.2637 c289.7344 434.4473 290.1821 434.6143 290.5361 434.7959 c290.7383 434.8994 290.8862 435.0845 290.9434 435.3042 c291.0005 435.5239 290.9604 435.7578 290.8335 435.9463 c290.23 436.8457 289.7188 437.8452 289.2725 439.0024 cf0.78 0.25 0.95 0 k265.3638 454.7881 m264.9814 454.7124 264.7109 454.3701 264.7241 453.9805 c265.0435 444.8394 270.7798 443.8506 273.231 443.8496 c273.2314 443.8496 L273.4604 443.8496 273.6787 443.9482 273.8296 444.1206 c273.981 444.2935 274.0498 444.5229 274.019 444.75 c272.8359 453.5908 268.8613 454.9106 266.5977 454.9106 c266.187 454.9106 265.772 454.8691 265.3638 454.7881 cf0.34 0.53 1 0 k285.7017 451.856 m272.7368 453.7114 L272.4204 453.7559 272.1113 453.6104 271.9458 453.3389 c271.7803 453.0688 271.791 452.7256 271.9736 452.4663 c272.3164 451.9795 272.6323 451.4316 272.9136 450.8364 c273.0269 450.5967 273.252 450.4292 273.5142 450.3896 C285.9058 448.5229 L285.9458 448.5176 285.9849 448.5142 286.0244 448.5142 c286.2432 448.5142 286.4546 448.605 286.606 448.7676 c286.7847 448.9595 286.8579 449.2271 286.8003 449.4829 c286.6636 450.0933 286.5181 450.6948 286.355 451.2817 c286.2705 451.5859 286.0142 451.8115 285.7017 451.856 Cf0.78 0.25 0.95 0 k271.085 459.8613 m270.8081 459.7832 270.5947 459.5605 270.5278 459.2803 c270.4614 459.0005 270.5513 458.7061 270.7637 458.5107 c273.0991 456.3633 275.8037 455.2744 278.7998 455.2744 c280.0146 455.2744 281.2456 455.4565 282.46 455.8149 c282.7524 455.9014 282.9697 456.1479 283.019 456.4492 c283.0684 456.7505 282.9409 457.0532 282.6909 457.2285 c279.8218 459.2412 276.9121 460.2617 274.0425 460.2617 c273.019 460.2617 272.0239 460.127 271.085 459.8613 cf0.87 0 0.75 0 k285.9634 455.3242 m285.7339 455.0913 285.6709 454.7422 285.8037 454.4438 c286.9155 451.9424 287.4517 449.1045 287.9712 446.353 c288.8936 441.4639 289.7642 436.8462 293.5474 433.7222 c294.6372 432.8218 295.7725 432.3843 297.0171 432.3843 c298.3628 432.3843 299.8496 432.9189 301.5605 434.0186 c301.6279 434.062 301.6768 434.1191 301.7236 434.1768 C301.8066 434.1987 301.8867 434.2324 301.9619 434.2832 c303.0068 434.9912 303.9678 435.7832 304.8184 436.4824 c308.9814 439.9067 311.0742 443.7466 313.2822 449.2207 c313.5479 449.8745 313.7715 450.7051 314.0088 451.5913 c314.2598 452.5215 314.5195 453.4829 314.8613 454.377 c314.9697 454.6621 314.9072 454.9849 314.6963 455.207 c314.4873 455.4297 314.1689 455.5117 313.8779 455.4189 c313.123 455.1787 312.2578 454.8877 311.5322 454.4697 c309.5527 453.3291 306.8135 451.4517 304.9961 448.9819 c304.3428 448.0933 301.7148 443.5171 300.668 439.8696 c300.625 439.7246 300.626 439.5703 300.668 439.4258 c301.0898 437.9941 301.2021 436.7539 301.0156 435.6348 c301.0049 435.5811 300.9805 435.5322 300.9434 435.4937 c300.9287 435.4775 300.9219 435.457 300.9092 435.4404 C300.8555 435.4316 300.8018 435.4312 300.752 435.4126 C300.707 435.4126 300.6621 435.4248 300.6221 435.4473 c299.6953 435.9717 299.4854 437.3052 299.9961 439.4102 c300.0322 439.5566 300.0244 439.7104 299.9756 439.8535 c299.7363 440.5581 299.458 441.2212 299.2432 441.7207 c299.0215 442.2339 298.8164 442.7441 298.6133 443.248 c297.8384 445.1704 297.1064 446.9863 295.6533 448.5415 c292.3906 452.0303 289.3438 454.436 286.8408 455.499 c286.5405 455.6255 286.1919 455.5571 285.9634 455.3242 cf327.8809 443.3042 m327.7236 443.5688 327.4238 443.7188 327.1211 443.688 c323.1182 443.2949 318.7324 441.9214 314.9365 440.665 c314.125 440.3965 306.9063 437.9497 303.8213 434.8633 c303.8027 434.8457 303.7578 434.8271 303.6973 434.812 c303.5918 434.7861 303.4922 434.7388 303.4053 434.6724 c303.1387 434.4688 302.8623 434.2705 302.583 434.0732 c302.3721 433.9238 302.2451 433.6797 302.2461 433.4194 c302.2471 433.1597 302.376 432.917 302.5898 432.7695 c304.6201 431.3682 308.1631 430.3115 310.833 430.3115 c311.29 430.3115 311.7148 430.3433 312.0967 430.4043 c316.4912 431.1108 319.5508 433.3291 323.3506 436.9224 c325.3066 438.7725 326.8604 440.9648 327.8584 442.4531 c328.0303 442.709 328.0381 443.04 327.8809 443.3042 cf0.34 0.53 1 0 k327.6758 441.25 m327.209 440.5835 326.7549 439.9707 326.2842 439.3774 c326.1436 439.1997 326.0859 438.9702 326.125 438.7466 c326.1641 438.5229 326.2969 438.3271 326.4893 438.2075 c328.8574 436.7422 330.1094 435.0386 330.1084 433.2813 c330.1084 432.6875 329.9688 432.0986 329.6953 431.5303 c329.6699 431.4814 329.6523 431.4302 329.6387 431.3779 C328.8643 428.2881 L328.7813 427.9551 328.9209 427.6064 329.209 427.4229 c329.3408 427.3398 329.4883 427.2988 329.6348 427.2988 c329.8154 427.2988 329.9932 427.3599 330.1396 427.4795 c331.4355 428.541 333.166 429.5024 335.2822 430.3369 c335.6709 430.4907 335.874 430.9194 335.748 431.3184 c334.7197 434.541 334.2773 437.8794 334.0869 440.1128 c334.0557 440.4795 333.7783 440.7769 333.4141 440.832 C328.4463 441.5811 L328.1465 441.6245 327.8486 441.498 327.6758 441.25 cf0.65 0.58 0.7 0 k329.1992 431.8037 m329.5439 433.1787 L329.5625 433.2524 329.5703 433.3281 329.5664 433.4038 c329.5049 434.9922 328.2412 436.5566 325.9141 437.9277 c325.5908 438.1196 325.1768 438.0562 324.9229 437.7793 c324.5391 437.3584 324.1406 436.9404 323.7148 436.5371 c322.5791 435.4634 321.6084 434.6138 320.6621 433.8623 c320.4326 433.6807 320.3604 433.3755 320.4111 433.0879 c320.4619 432.8003 320.7041 432.5513 320.9814 432.46 C321.3291 432.3467 L323.1855 431.7563 324.7354 431.125 324.9082 429.3667 c324.9355 429.0942 325.0996 428.8545 325.3457 428.7324 c325.458 428.6768 325.5781 428.6494 325.7002 428.6494 c325.8447 428.6494 325.9883 428.6885 326.1143 428.7661 c327.5742 429.6587 328.5869 430.6191 329.1279 431.6201 c329.1582 431.6782 329.1836 431.7402 329.1992 431.8037 Cf0.34 0.53 1 0 k327.0283 416.9033 m327.3057 416.9033 327.5723 417.0479 327.7178 417.3008 c327.9805 417.7549 328.2705 418.2061 328.5811 418.6436 c328.7822 418.9248 328.7773 419.3037 328.5713 419.5791 c328.4404 419.7578 328.3193 419.9351 328.209 420.1147 c328.043 420.3882 327.7275 420.5366 327.4111 420.4858 c327.0938 420.4375 326.8379 420.2041 326.7588 419.8931 C326.2578 417.8916 L326.1611 417.5068 326.3633 417.1104 326.7305 416.9609 c326.8281 416.9219 326.9287 416.9033 327.0283 416.9033 cf0.85 0 0.6 0 k336.6807 439.8149 m336.5332 439.9521 336.3652 440.0981 336.127 440.3032 c336.0137 440.3989 335.876 440.4619 335.7295 440.4834 C335.5693 440.5073 L335.3271 440.5415 335.083 440.4663 334.9053 440.2974 c334.7275 440.1294 334.6377 439.8887 334.6602 439.6455 c335.1494 434.5469 336.4004 430.0625 338.1846 427.0195 c338.541 426.4092 341.75 421.0581 344.2998 421.0581 c344.9814 421.0581 345.5518 421.4463 346.043 422.2451 c348.1914 425.7314 345.6621 430.6846 343.4385 433.1636 c341.3975 435.437 339.2676 437.4136 337.0107 439.5098 C336.6807 439.8149 Lf0.34 0.53 1 0 k340.6289 437.1309 m340.749 437.1309 340.8691 437.1577 340.9805 437.2129 c341.2793 437.3599 341.4551 437.6787 341.4199 438.0107 c341.3848 438.334 341.3594 438.6611 341.3428 438.9941 c341.3232 439.3716 341.041 439.6836 340.667 439.7402 C339.4775 439.9189 L339.1338 439.9644 338.7959 439.7925 338.6426 439.479 c338.4912 439.166 338.5605 438.79 338.8145 438.5527 c339.2412 438.1538 339.6611 437.7524 340.0791 437.3521 c340.2305 437.207 340.4287 437.1309 340.6289 437.1309 cf340.8008 443.9761 m335.3506 444.7563 L335.1191 444.7876 334.8887 444.7197 334.7148 444.5684 c334.541 444.416 334.4414 444.1963 334.4414 443.9648 C334.4492 443.3359 L334.4502 443.2681 334.46 443.2007 334.4785 443.1357 c334.6934 442.374 335.375 441.6846 336.0117 441.1104 c336.1279 441.0059 336.2715 440.938 336.4258 440.9146 C340.4219 440.313 L340.4609 440.3076 340.5 440.3042 340.5391 440.3042 c340.7236 440.3042 340.9023 440.3682 341.0469 440.4873 c341.2207 440.6309 341.3252 440.8428 341.335 441.0684 c341.3613 441.7695 341.4111 442.458 341.4795 443.1064 c341.5234 443.5317 341.2246 443.9155 340.8008 443.9761 Cf328.9766 443.1777 m328.8271 442.9512 328.8037 442.6646 328.9141 442.4165 c329.0244 442.1689 329.2539 441.9946 329.5215 441.9541 C333.0391 441.4238 L333.0781 441.4185 333.1191 441.415 333.1582 441.415 c333.3525 441.415 333.542 441.4868 333.6895 441.6187 c333.8652 441.7773 333.9629 442.0063 333.9521 442.2437 c333.9404 442.5625 333.9287 442.8643 333.9238 443.125 c333.9219 443.1641 333.918 443.2026 333.9111 443.2407 c333.8721 443.4771 333.8682 443.7144 333.9053 443.9497 C333.918 443.9829 333.9307 444.0171 333.9375 444.0396 c334.002 444.2603 333.9678 444.4995 333.8428 444.6934 c333.7188 444.8872 333.5156 445.0176 333.2881 445.0503 C330.2002 445.4927 L329.8818 445.541 329.5811 445.3667 329.4189 445.0884 c329.2549 444.8096 329.2939 444.4404 329.4902 444.1836 C329.5352 444.0952 329.5283 443.9897 329.4707 443.9082 c329.334 443.7168 329.1631 443.4619 328.9766 443.1777 cf327.748 445.8428 m321.1846 446.7822 L320.7783 446.8408 320.3848 446.5718 320.2959 446.1646 C320.1846 445.6401 L320.0625 445.0581 319.958 444.5557 319.751 444.0371 c319.6387 443.7583 319.6934 443.4395 319.8936 443.2139 c320.0469 443.0415 320.2646 442.9463 320.4883 442.9463 c320.5566 442.9463 320.626 442.9551 320.6934 442.9731 c323.3857 443.6929 325.6758 444.1152 327.6943 444.2627 c328.0996 444.292 328.417 444.6221 328.4316 445.0283 c328.4453 445.4341 328.1514 445.7852 327.748 445.8428 Cf0.87 0 0.75 0 k320.5137 463.3276 m320.1963 463.4722 319.8252 463.3965 319.5918 463.1392 c319.1592 462.6626 318.6602 462.0557 318.1094 461.3345 C317.9746 461.1592 L317.6748 460.77 317.2285 460.3135 316.7119 459.7842 c316.2246 459.2866 315.5605 458.6055 315.0156 457.9307 c314.7832 457.6445 314.7793 457.2383 315.0029 456.9468 c315.2266 456.6553 315.6221 456.5557 315.957 456.7051 c316.165 456.7979 316.3623 456.8965 316.5488 457.0039 c316.668 457.0698 316.8252 457.0337 316.9004 456.9243 c316.9775 456.812 316.9561 456.6563 316.8506 456.5693 c315.6309 455.5684 315.041 453.3823 314.5205 451.4526 c314.2783 450.5557 314.0508 449.708 313.7744 449.0225 c312.29 445.3438 310.9951 442.8477 309.4434 440.6738 c309.2363 440.3828 309.249 439.9883 309.4746 439.7104 c309.6289 439.5205 309.8574 439.417 310.0918 439.417 c310.1992 439.417 310.3066 439.439 310.4102 439.4844 c312.4189 440.3657 314.1279 440.9556 314.7705 441.1685 c315.7549 441.4946 316.7734 441.8223 317.8066 442.1406 c318.0498 442.2158 318.2705 442.481 318.3535 442.7217 C319.291 443.9468 319.4238 444.5854 319.6738 445.7896 C319.8086 446.418 L320.3516 448.8467 320.6885 451.8652 320.6855 454.2964 C320.6836 455.1606 L320.6748 457.5806 320.667 460.083 320.9697 462.5068 c321.0127 462.8506 320.8281 463.1826 320.5137 463.3276 cf296.376 448.5132 m297.6909 446.9521 298.4097 445.1699 299.1055 443.4453 c299.2441 443.1001 299.3838 442.7524 299.5303 442.4028 c299.6543 442.1069 299.9424 441.9141 300.2637 441.9141 c300.2656 441.9141 300.2666 441.9141 300.2676 441.9141 c300.5908 441.916 300.8799 442.1123 301.001 442.4106 c302.291 445.5957 304.0762 448.626 304.5684 449.2959 c304.7109 449.4878 304.8652 449.6719 305.0762 449.9263 c305.3066 450.2046 305.3203 450.604 305.1104 450.8975 c305.0684 450.9551 305.0469 451.002 305.0469 451.0361 c305.0313 451.6064 305.0322 452.147 305.0352 452.6685 c305.0391 455.063 305.043 456.9536 303.4404 459.3862 c301.8154 461.8486 299.4268 463.9844 296.7212 465.3955 C296.1563 465.6963 L295.6499 465.9673 295.02 466.3057 294.3755 466.5923 c294.0806 466.7236 293.7334 466.6636 293.5 466.4385 c293.2671 466.2139 293.1934 465.8701 293.3145 465.5693 c293.3999 465.3564 293.4858 465.1343 293.5898 464.8647 c293.7051 464.563 293.8096 464.29 293.9038 464.0796 c294.5454 462.6401 294.6318 461.0898 294.7153 459.5918 c294.7314 459.3052 294.7471 459.0195 294.7671 458.7339 c294.8027 458.2163 294.8267 457.6924 294.8506 457.166 c294.9224 455.5845 294.9966 453.9482 295.415 452.4272 c295.5239 452.0308 295.6514 451.6729 295.7896 451.2842 c295.9888 450.7295 296.1943 450.1558 296.2969 449.4922 c296.3008 449.4648 296.2881 449.4155 296.2598 449.3535 c296.1338 449.0742 296.1787 448.7476 296.376 448.5132 cf0.73 0.67 0.74 0 k278.27 428.9136 m278.0024 429.0879 277.6558 429.0845 277.3916 428.9043 c276.4458 428.2632 275.2549 427.6758 273.853 427.1597 c273.4824 427.0234 273.2681 426.6362 273.3496 426.25 c273.4302 425.8647 273.7778 425.5991 274.1763 425.6201 c275.186 425.6807 276.2324 425.5991 277.3179 425.3418 c277.3691 425.3291 277.4204 425.3237 277.4717 425.3237 c277.6577 425.3237 277.8389 425.3999 277.9888 425.5195 c278.1797 425.6714 278.2817 425.9292 278.2803 426.1738 C278.6211 428.1089 L278.6763 428.4229 278.5381 428.7402 278.27 428.9136 cf0.34 0.53 1 0 k280.3862 431.9307 m280.0459 431.8818 279.7764 431.6196 279.7168 431.2817 C278.8022 426.0825 L278.8008 426.0718 278.7905 426.04 278.7402 425.9746 c278.5918 425.7827 278.5391 425.5337 278.5977 425.2983 c278.6558 425.0625 278.8184 424.8667 279.0386 424.7656 c279.2979 424.647 279.541 424.5098 279.7798 424.3687 c279.9048 424.2944 280.0449 424.2573 280.1855 424.2573 c280.3086 424.2573 280.4316 424.2856 280.5444 424.3433 c280.7876 424.4658 280.9502 424.7041 280.9771 424.9746 c280.9976 425.186 281.0293 425.3984 281.0864 425.6143 c281.3354 426.5454 281.9497 427.5229 282.8154 428.3657 c282.9741 428.5195 283.061 428.7334 283.0557 428.9546 c283.0503 429.1763 282.9531 429.3848 282.7871 429.5313 c282.0811 430.1548 281.5508 430.8169 281.2119 431.498 c281.0591 431.8062 280.7266 431.978 280.3862 431.9307 cf0.73 0.67 0.74 0 k327.8896 428.6807 m327.6191 428.8696 327.2607 428.874 326.9883 428.6885 c324.3828 426.9316 320.2246 425.5112 315.2793 424.6885 c314.9629 424.6357 314.7207 424.395 314.6455 424.0884 C314.4834 424.3633 314.1758 424.5171 313.8535 424.4722 c312.3135 424.2578 310.7461 424.103 309.1924 424.0122 c308.9443 423.998 308.7168 423.8677 308.5781 423.6611 c308.4385 423.4541 308.4063 423.1943 308.4863 422.9595 c308.9287 421.6792 308.9756 420.5068 308.625 419.4756 c308.0703 417.8369 306.4336 417.2725 304.8486 416.7256 c303.3672 416.2148 301.835 415.6865 301.1592 414.2861 c300.5068 412.9355 301.2637 411.7813 302.1406 410.4453 c302.9121 409.2695 303.7119 408.0527 303.5938 406.5645 c303.5166 405.5908 303.0967 404.6279 302.4082 403.8535 c302.1436 403.5557 302.1396 403.1113 302.3965 402.8086 c302.5537 402.626 302.7764 402.5303 303.0029 402.5303 c303.1504 402.5303 303.2969 402.5703 303.4297 402.6553 c304.7402 403.4912 306.2891 404.2588 308.0332 404.9395 c308.2627 405.0283 308.4365 405.2188 308.5068 405.4551 c308.5781 405.6914 308.5342 405.9453 308.3896 406.1445 c305.7969 409.7422 303.6641 412.1123 303.5723 412.2139 c303.4941 412.3008 303.4814 412.4316 303.542 412.5303 c303.5889 412.6094 303.6719 412.6631 303.8359 412.6484 C307.5693 411.6484 311.0684 409.7764 314.2412 407.0869 c314.4482 406.9121 314.7285 406.8545 314.9873 406.9336 c315.0107 406.9395 315.043 406.9521 315.0752 406.9668 C315.9746 407.1465 316.958 407.3145 318.0791 407.4756 c318.2979 407.5068 318.4922 407.627 318.6191 407.8096 c318.7451 407.9893 318.7891 408.2148 318.7432 408.4307 c316.8926 416.9766 314.5596 422.8706 314.5352 422.9297 c314.5029 423.0122 314.5205 423.1084 314.584 423.187 c314.6582 423.2803 314.7012 423.3882 314.7275 423.4995 C314.8105 423.3584 314.9365 423.2427 315.0947 423.1743 c318.249 421.8091 321.0479 418.8623 323.4102 414.415 c323.5488 414.1533 323.8213 413.9922 324.1123 413.9922 c324.1445 413.9922 324.1768 413.9941 324.21 413.999 c324.5361 414.0381 324.8037 414.2764 324.8848 414.5947 C328.2041 427.8359 L328.2852 428.1558 328.1582 428.4912 327.8896 428.6807 cf331.9004 408.8154 m331.8545 408.5928 331.9053 408.3613 332.041 408.1787 c332.1768 407.9971 332.3848 407.8809 332.6104 407.8613 c332.8691 407.8398 333.1445 407.8115 333.4668 407.7744 c333.4971 407.7725 333.5254 407.7695 333.5547 407.7695 c333.7725 407.7695 333.9834 407.8594 334.1348 408.0205 c335.6631 409.6465 337.373 411.1484 339.2158 412.4873 c339.4629 412.667 339.5859 412.9736 339.5313 413.2744 c339.4746 413.5752 339.251 413.8184 338.9551 413.8984 c337.3027 414.3467 335.7686 414.877 334.3975 415.4756 c334.1846 415.5684 333.9395 415.5645 333.7285 415.4609 c333.5195 415.3584 333.3662 415.1689 333.3086 414.9424 c332.8115 412.9834 332.3379 410.9219 331.9004 408.8154 cf0.5 0.78 1 0 k347.7061 417.5254 m347.7656 417.7715 347.7031 418.0322 347.5381 418.2256 c347.4434 418.3389 347.3477 418.4629 347.2588 418.6055 c347.0225 418.9805 346.8799 419.5674 346.834 420.3438 c346.8184 420.6323 346.6465 420.8896 346.3848 421.0151 c346.124 421.1406 345.8154 421.1133 345.5801 420.9463 c344.0576 419.8633 341.9473 420.9395 339.6094 423.9526 c339.3984 424.2251 339.0342 424.3296 338.7109 424.2129 c338.6865 424.2041 338.6543 424.1899 338.6221 424.1738 C338.4229 424.1182 338.2158 424.064 338.001 424.0098 c337.249 423.8159 336.5811 423.6304 336.0254 423.3184 c335.8574 423.2246 335.7305 423.0737 335.665 422.8936 c335.3418 421.9966 334.6768 420.041 333.8574 417.0322 c333.7539 416.6553 333.9404 416.2598 334.2959 416.0986 c336.0781 415.291 338.1211 414.6104 340.3672 414.0771 c340.3984 414.0703 340.4375 414.042 340.4648 414.0195 c340.6123 413.8975 340.792 413.835 340.9746 413.835 c341.1201 413.835 341.2666 413.875 341.3955 413.9551 c343.2168 415.0938 345.1836 416.1113 347.2412 416.9775 c347.4746 417.0762 347.6484 417.2803 347.7061 417.5254 cf0.85 0 0.6 0 k350.7227 431.1504 m349.7041 429.5049 348.7441 427.9507 348.2021 426.1426 c347.6904 424.437 346.8555 420.2422 347.707 418.8877 c348.1104 418.248 348.6104 417.9375 349.2363 417.9375 c351.7295 417.9375 355.54 422.8726 356.6348 424.8359 c358.1514 427.5522 359.0459 430.6172 359.3682 434.2051 c359.373 434.2446 359.373 434.2847 359.3711 434.3252 c359.3682 434.3486 359.3643 434.3809 359.3594 434.4131 C359.3623 434.5874 359.3857 434.7891 359.4395 435.0952 C359.6484 438.3843 359.4063 441.8164 359.166 445.2324 c359.1445 445.5698 358.915 445.8574 358.5898 445.9502 c358.2627 446.0435 357.917 445.9194 357.7217 445.6436 c356.2539 443.5605 355.1855 440.876 354.1504 438.2725 c353.3262 436.2002 352.4727 434.0581 351.4473 432.3359 c351.2217 431.958 350.9893 431.583 350.7227 431.1504 cf0.78 0.25 0.95 0 k269.7568 475.1982 m269.5254 475.1826 269.3125 475.0669 269.1738 474.8809 c268.4468 473.9092 267.5928 472.3379 267.6465 470.374 c267.7036 468.2881 268.7695 466.2212 270.8145 464.229 c270.9644 464.0825 271.1641 464.0034 271.3691 464.0034 c271.4302 464.0034 271.4912 464.0107 271.5518 464.0244 c271.8169 464.0874 272.0313 464.2808 272.1201 464.5376 c272.9497 466.9253 273.8262 471.4551 270.3774 474.9629 c270.2158 475.1279 269.9956 475.2153 269.7568 475.1982 cf261.0698 468.5605 m260.8984 468.7129 260.6689 468.7842 260.4434 468.7549 c260.2163 468.7261 260.0127 468.6016 259.8843 468.4121 c258.9292 467.0029 257.4258 464.2075 258.0898 461.3145 c258.6069 459.0586 260.3472 457.1538 263.2612 455.6543 c263.3755 455.5957 263.5005 455.5659 263.625 455.5659 c263.7524 455.5659 263.8804 455.5967 263.9966 455.6582 c264.2261 455.7793 264.3818 456.0049 264.4141 456.2627 c264.7295 458.7891 265.0347 465.0444 261.0698 468.5605 cf0.34 0.53 1 0 k257.0571 447.4126 m257.1943 447.3154 257.3555 447.2661 257.5171 447.2661 c257.6484 447.2661 257.7803 447.2988 257.8994 447.3638 C260.9707 449.0479 L261.1191 449.1299 261.2383 449.2573 261.3096 449.4111 c261.8052 450.481 262.3354 451.5283 262.8862 452.5244 c263.0571 452.8335 263.0039 453.2178 262.7554 453.4683 c262.5059 453.7207 262.1221 453.7749 261.8125 453.6084 c261.0327 453.1865 260.0654 452.6689 258.8423 452.0151 C257.6226 451.3638 L257.4141 451.2524 257.2661 451.0537 257.2183 450.8223 c257.0371 449.9409 256.8765 449.0625 256.7329 448.1909 c256.6831 447.8906 256.8091 447.5889 257.0571 447.4126 cf256.3394 445.5313 m256.165 444.1914 256.0176 442.8037 255.9019 441.4063 c255.8833 441.1777 255.9634 440.9526 256.123 440.7881 c256.2734 440.6323 256.4795 440.5454 256.6943 440.5454 c256.708 440.5454 256.7207 440.5459 256.7344 440.5464 c256.9775 440.5591 257.2217 440.5708 257.4673 440.5796 c257.8081 440.5918 258.103 440.8193 258.2007 441.1455 c258.7285 442.9033 259.3262 444.6353 259.978 446.2954 c260.1001 446.6069 260.0142 446.9619 259.7632 447.1826 c259.5122 447.4043 259.1489 447.4429 258.8555 447.2832 C256.7451 446.126 L256.5229 446.0039 256.3721 445.7837 256.3394 445.5313 cf255.2637 444.8247 m255.0171 444.9897 254.6997 445.0029 254.4385 444.8613 C246.6265 440.5771 L246.2725 440.3828 246.1201 439.9541 246.2729 439.5801 c246.3975 439.2739 246.6929 439.0845 247.0093 439.0845 c247.0796 439.0845 247.1514 439.0938 247.2231 439.1138 c249.4365 439.7314 251.9209 440.166 254.6064 440.4058 c254.9927 440.4404 255.2979 440.7485 255.3281 441.1348 c255.4033 442.0786 255.4971 443.063 255.6108 444.0752 c255.6445 444.3701 255.5107 444.6592 255.2637 444.8247 cf0.73 0.67 0.74 0 k238.3916 426.0205 m239.4551 426.5049 240.6025 426.8633 241.8027 427.0854 c242.1284 427.1455 242.3818 427.4004 242.4409 427.7261 c242.4995 428.0518 242.3506 428.3794 242.0664 428.5493 c241.3784 428.9609 240.7896 429.4019 240.3169 429.8604 c240.1479 430.0249 239.9121 430.106 239.6797 430.0801 c239.4453 430.0552 239.2334 429.9277 239.1025 429.7314 C237.4009 427.186 L237.2036 426.8906 237.2261 426.5 237.4565 426.229 c237.6113 426.0469 237.834 425.9492 238.0625 425.9492 c238.1733 425.9492 238.2856 425.9722 238.3916 426.0205 cf0.5 0.78 1 0 k255.3237 430.52 m255.2168 430.5356 255.0996 430.6143 255.0923 430.751 c255.0869 430.8525 255.064 431.3447 255.0479 432.1382 c255.0396 432.521 254.7598 432.8438 254.3818 432.9067 c252.7056 433.1831 251.0278 433.3906 249.644 433.1885 c247.7695 432.916 246.2466 432.3857 244.9893 431.5693 c244.8599 431.4854 244.6821 431.3809 244.4707 431.2568 c243.8584 430.8955 243.1001 430.4302 242.6631 430.0308 c242.5146 429.8955 242.4243 429.71 242.4072 429.5127 c242.4043 429.4824 242.4023 429.4517 242.4023 429.4238 c242.4023 429.1323 242.5615 428.8643 242.8184 428.7246 c243.521 428.3433 244.3306 427.9824 245.2236 427.6519 c245.2554 427.6396 245.2842 427.6206 245.3135 427.5923 c245.4541 427.4561 245.6406 427.376 245.8359 427.3687 c247.1445 427.3174 248.5088 427.1465 249.8901 426.8613 c250.0044 426.8374 250.0566 426.7412 250.0737 426.7012 c250.1782 426.4536 250.4004 426.2764 250.6646 426.2285 c253.418 425.7319 256.4468 425.4692 259.4243 425.4688 c265.9355 425.4688 271.8687 426.5918 275.7021 428.5508 c275.9526 428.6787 276.1167 428.9292 276.1338 429.2104 c276.1509 429.4912 276.019 429.7598 275.7866 429.9175 C275.3989 430.1772 L274.2505 430.9624 273.166 431.7036 271.7725 432.2876 c269.9028 433.0728 268.0527 433.4541 266.1182 433.4541 c264.5381 433.4541 262.8848 433.2124 260.7593 432.6699 c259.7822 432.4209 258.625 432.3765 257.4512 432.4766 c257.0249 432.5186 256.667 432.2236 256.5991 431.8154 c256.4404 430.8633 256.3682 430.2915 256.3633 430.249 c256.3477 430.1157 256.2373 430.0078 256.0698 430.0171 C255.981 430.0273 255.9214 430.0957 255.8872 430.1509 c255.7637 430.3521 255.5571 430.4868 255.3237 430.52 cf0.73 0.67 0.74 0 k251.6919 413.916 m251.9229 413.916 252.146 414.0166 252.2988 414.1963 c253.7012 415.8525 255.8076 416.1914 258.5391 416.1914 c258.8945 416.1914 259.2515 416.1865 259.6875 416.1777 c260.0684 416.1709 260.4473 416.165 260.8193 416.165 c261.6914 416.165 262.3345 416.2021 262.9033 416.2852 c265.3633 416.6475 265.9307 418.21 266.5879 420.0186 c267.083 421.3794 267.5942 422.7871 268.9536 423.8223 c269.2192 424.0249 269.5352 424.2256 269.9189 424.437 c270.2642 424.6265 270.4185 425.0396 270.2822 425.4087 c270.146 425.7778 269.7588 425.9941 269.375 425.9121 c263.6211 424.7222 256.5962 424.6309 250.6284 425.6973 c250.231 425.7661 249.8389 425.5269 249.7251 425.1367 c249.332 423.7852 248.5791 421.71 247.2251 419.501 c246.9966 419.1279 247.1123 418.6416 247.4839 418.4092 c249.3857 417.2295 250.5435 415.9141 250.9243 414.5029 c251.0015 414.2188 251.2305 413.999 251.519 413.9346 c251.5767 413.9219 251.6348 413.916 251.6919 413.916 cf0.34 0.53 1 0 k251.2222 409.0332 m251.0518 409.3145 250.7319 409.4629 250.3999 409.4043 c250.0757 409.3457 249.8218 409.0928 249.7607 408.7695 C249.502 407.3975 L249.4277 407.0039 249.6563 406.6172 250.0361 406.4932 c250.1177 406.4668 250.2007 406.4541 250.2832 406.4541 c250.582 406.4541 250.8652 406.624 251.0005 406.9063 c251.1348 407.1875 251.3013 407.4688 251.4966 407.7441 c251.7046 408.0371 251.6895 408.4336 251.46 408.7109 c251.375 408.8135 251.292 408.917 251.2222 409.0332 cf0.65 0.58 0.7 0 k256.1465 406.1719 m255.6201 406.4414 255.0493 406.6768 254.5459 406.8828 c253.9395 407.1318 253.3965 407.3604 252.896 407.6221 c252.5391 407.8096 252.0977 407.7002 251.8701 407.3662 c251.335 406.583 251.0635 405.792 251.0635 405.0117 c251.0635 403.7754 251.6997 402.5664 252.9546 401.417 c253.1045 401.2803 253.2964 401.208 253.4922 401.208 c253.5874 401.208 253.6831 401.2246 253.7749 401.2598 c254.0557 401.3672 254.2524 401.623 254.2832 401.9219 c254.3555 402.6309 254.5161 403.1934 254.7598 403.5977 c255.0664 404.1025 255.5957 404.4219 256.0659 404.7051 C255.7031 405.3076 L255.7114 405.3232 L256.1904 404.7813 L256.4385 404.9287 256.5874 405.2002 256.5781 405.4893 c256.5693 405.7783 256.4033 406.0391 256.1465 406.1719 cf0.5 0.78 1 0 k278.9238 397.9795 m277.2021 398.9102 276.2295 399.2715 274.4487 399.1182 c272.606 398.96 271.5435 398.2119 270.5166 397.1367 c270.3037 396.9131 270.2388 396.5879 270.3496 396.2998 c270.46 396.0137 270.7266 395.8154 271.0342 395.7939 c272.7432 395.6709 274.1738 395.6123 275.5371 395.6123 c277.0557 395.6123 278.5952 395.6602 280.1138 395.7539 c280.4883 395.7764 280.7959 396.0566 280.8516 396.4287 c280.9077 396.7988 280.6968 397.1582 280.3457 397.29 c279.8936 397.4609 279.4526 397.6934 278.9238 397.9795 cf297.8735 402.5234 m297.6426 402.5957 297.4131 402.6768 297.189 402.7881 c295.9453 403.4004 295.5288 404.7402 295.1616 405.9229 c294.6841 407.457 294.2334 408.9082 292.2007 409.0225 c292.0278 409.0313 291.8901 409.0381 291.7778 409.0381 c290.9536 409.0381 290.6816 408.6055 290.3945 408.1465 c290.2241 407.876 290.0313 407.5684 289.7246 407.2266 c288.9092 406.3184 288.2085 405.8613 287.4521 405.749 c287.0576 405.6885 286.7681 405.3477 286.7749 404.9473 c286.8203 402.3672 285.917 399.0684 283.2461 397.5518 c282.9165 397.3643 282.7651 396.9727 282.8823 396.6133 c282.9907 396.2832 283.2979 396.0654 283.6377 396.0654 c283.6685 396.0654 283.6997 396.0664 283.731 396.0703 c290.7227 396.8906 295.8682 398.7188 298.2188 401.2188 c298.4067 401.4189 298.4785 401.7031 298.4082 401.9678 c298.3379 402.2324 298.1362 402.4434 297.8735 402.5234 cf0 0.8 0.58 0 k298.7832 395.125 m298.7876 394.9814 298.8687 394.7559 298.9458 394.6348 C299.2109 393.1953 L299.2217 393.1357 299.2383 393.0801 299.2617 393.0254 c299.4365 392.6201 299.6582 392.2168 299.9209 391.8271 c300.0713 391.6055 300.3193 391.4775 300.5801 391.4775 c300.6279 391.4775 300.6758 391.4814 300.7246 391.4902 c301.0352 391.5479 301.2822 391.7842 301.3555 392.0918 c301.4707 392.5918 301.6846 392.9805 302.0234 393.3164 c302.6426 393.9297 303.3799 394.0205 304.0928 394.1094 c304.7305 394.1885 305.333 394.2646 305.7881 394.7285 c305.96 394.9033 306.1201 395.0781 306.2939 395.2715 c306.9707 396.0166 307.6084 396.7217 308.8818 396.9756 c309.375 397.0732 309.8867 397.0859 310.2764 397.0859 c310.4785 397.0859 310.6777 397.083 310.9072 397.0791 C311.4873 397.0703 L311.9541 397.0703 312.2979 397.0938 312.5225 397.1367 C312.54 397.1348 312.627 397.126 312.6455 397.126 c312.9326 397.1162 313.2012 397.2598 313.3516 397.5029 c313.502 397.7471 313.5098 398.0518 313.3721 398.3027 c312.2861 400.2852 311.0371 402.3154 309.6563 404.3389 c309.4512 404.6416 309.0664 404.7637 308.7227 404.6367 c302.4004 402.2822 298.7744 398.877 298.7739 395.293 c298.7739 395.2432 298.7769 395.1943 298.7832 395.125 Cf0.85 0.25 0.83 0 k322.002 386.7842 m322.0732 386.7607 322.1484 386.748 322.2236 386.748 c322.4971 386.748 322.7822 386.8994 322.9443 387.1162 c323.2451 387.5166 323.583 387.9697 324.0938 388.1768 C324.1309 388.1846 324.2031 388.207 324.2402 388.2207 c324.5098 388.3262 324.7012 388.5684 324.7412 388.8535 c324.9404 390.3135 325.6426 394.2051 327.8242 398.7852 c327.9063 398.957 327.9238 399.1514 327.873 399.3359 c327.8662 399.3584 327.8545 399.3955 327.8408 399.4297 C327.626 400.6465 324.8271 415.6875 317.2168 421.3384 c316.9375 421.5464 316.5547 421.5483 316.2744 421.3433 c315.9932 421.1387 315.8779 420.7754 315.9893 420.4458 c317.7549 415.21 321.8223 401.5205 321.4268 387.501 c321.416 387.1543 321.6748 386.8994 322.002 386.7842 cf0.5 0.78 1 0 k369.0957 422.4341 m368.3613 422.7114 367.7803 422.8779 367.1533 422.9897 c366.8867 423.0376 366.5625 423.04 366.2207 423.043 c365.6826 423.0479 365.0117 423.0537 364.5205 423.314 c364.2139 423.4761 363.8369 423.4224 363.5889 423.1763 c363.1191 422.7104 362.6162 422.2422 362.0713 421.7676 c360.6299 420.5137 357.4902 418.3164 355.2129 418.6699 c354.7217 418.7471 354.2822 418.959 353.9063 419.3037 c353.6035 419.5801 353.1406 419.5811 352.8369 419.3066 c351.8926 418.4551 351.0117 417.8818 350.2197 417.6016 c350.1211 417.5664 350.0293 417.5127 349.9521 417.4424 c349.7197 417.2334 348.4746 416.0986 346.7324 414.3027 c346.5195 414.084 346.4512 413.7627 346.5557 413.4746 c346.6602 413.1895 346.9219 412.9883 347.2256 412.957 c349.1865 412.7666 351.2012 412.6689 353.2148 412.6689 c359.0146 412.6689 364.6846 413.4785 369.1211 414.9346 C369.0449 415.7178 L369.0449 415.7178 L369.2422 414.9414 L369.6592 414.9697 369.9834 415.3154 369.9834 415.7354 C369.9834 421.6211 L369.9834 422.0601 369.5361 422.4341 369.0957 422.4341 Cf0.65 0.58 0.7 0 k369.3867 430.5283 m369.0361 430.6152 368.667 430.46 368.4922 430.1411 c368.2383 429.6807 367.9785 429.2153 367.7148 428.75 C367.2891 427.9946 L366.6816 426.8926 365.9863 425.876 365.165 424.8872 c364.9717 424.6543 364.9268 424.3315 365.0508 424.0552 c365.1729 423.7788 365.4434 423.5962 365.7451 423.584 c365.9121 423.5781 366.082 423.5742 366.2246 423.5732 c366.5723 423.5708 366.9336 423.5674 367.248 423.5117 c367.7451 423.4233 368.2773 423.2764 368.9258 423.0488 c369.0117 423.019 369.0996 423.0044 369.1885 423.0044 c369.3516 423.0044 369.5127 423.0547 369.6484 423.1509 c369.8594 423.2998 369.9834 423.542 369.9834 423.7998 C369.9844 429.7583 L369.9844 430.1211 369.7393 430.438 369.3867 430.5283 cf0.78 0.25 0.95 0 k241.5688 448.1367 m241.4932 447.8618 241.5703 447.5674 241.7705 447.3652 c241.9224 447.2129 242.1265 447.1299 242.3354 447.1299 c242.4038 447.1299 242.4727 447.1387 242.5405 447.1567 c244.7021 447.7339 248.6948 449.4351 251.1416 454.3438 c251.2769 454.6147 251.2466 454.9395 251.0625 455.1797 c250.8784 455.4214 250.5742 455.5371 250.2773 455.479 c247.6396 454.9634 243.0005 453.3242 241.5688 448.1367 cf0.34 0.53 1 0 k229.4272 436.0142 m229.3687 435.8052 229.3979 435.5815 229.5088 435.3945 c229.9058 434.7251 230.2808 434.0195 230.5923 433.3535 c230.6855 433.1548 230.8569 433.0029 231.0654 432.9346 c231.1465 432.9082 231.229 432.895 231.3125 432.895 c231.4448 432.895 231.5767 432.9282 231.6948 432.9932 C255.5381 446.0688 L255.7568 446.189 255.9067 446.4053 255.9424 446.6523 c256.0327 447.2793 256.1338 447.9141 256.2432 448.5532 c256.2651 448.6821 256.2549 448.8145 256.2134 448.939 c256.1963 448.9883 256.1821 449.0176 256.1904 448.9736 c256.188 448.9839 256.1519 449.1563 256.082 449.4253 c256.021 449.6616 255.8555 449.8564 255.6318 449.9551 c255.4092 450.0518 255.1538 450.042 254.9375 449.9282 C229.8179 436.502 L229.6265 436.3994 229.4849 436.2236 229.4272 436.0142 cf0.65 0.08 0.95 0 k228.6963 416.6074 m228.8164 416.3037 229.1094 416.1045 229.4355 416.1045 c229.4365 416.1045 229.438 416.1045 229.439 416.1045 c229.7666 416.1064 230.0596 416.3086 230.1772 416.6143 c231.0947 418.9951 232.3115 421.0322 233.7944 422.6665 c233.8667 422.7461 233.9331 422.9038 233.9683 423.0054 C240.9453 433.4419 L241.1108 433.689 241.124 434.0068 240.9814 434.2671 c240.8384 434.5269 240.5635 434.668 240.2656 434.6792 C237.1826 434.606 234.6128 433.6304 232.6279 431.7788 c227.8174 427.2915 227.9219 419.0742 227.8989 418.915 C227.8394 418.7246 227.8545 418.5176 227.9409 418.3369 c228.2534 417.6836 228.5005 417.1016 228.6963 416.6074 cf229.9663 414.3018 m229.8784 413.9902 229.9883 413.6572 230.2441 413.458 c230.3867 413.3486 230.5586 413.292 230.7314 413.292 c230.8687 413.292 231.0063 413.3271 231.1304 413.3984 c233.7236 414.9004 236.9668 415.1318 240.8662 414.0127 c241.1084 413.9453 241.3716 413.9932 241.5732 414.1484 c241.5962 414.166 241.623 414.1914 241.6494 414.2188 C246.6924 417.7686 248.6851 423.3208 249.3086 425.5493 c249.3696 425.7671 249.335 426.001 249.2134 426.1914 c249.0918 426.3818 248.895 426.5117 248.6714 426.5483 c243.9297 427.3242 239.8784 426.6313 236.707 424.5015 c232.7646 421.854 230.8652 417.4941 229.9663 414.3018 cf0.5 0.78 1 0 k227.2798 410.0664 m227.1455 410.2988 226.9048 410.4473 226.6382 410.4619 c221.0425 410.7949 216.4971 412.0127 213.127 414.085 c212.8906 414.2295 212.5952 414.2412 212.3511 414.1172 c211.0591 413.4629 208.3706 412.0996 208.6523 410.1738 c208.6572 410.1426 208.6533 410.1055 208.6411 410.0625 c208.5469 409.7256 208.6826 409.3682 208.9751 409.1787 c213.0977 406.5137 220.2773 404.9229 228.1812 404.9229 c229.5171 404.9229 230.8623 404.9736 232.293 405.0771 c232.6948 405.1064 233.0107 405.4297 233.0298 405.833 c233.0488 406.2354 232.7637 406.5879 232.3662 406.6543 c230.646 406.9414 228.9077 407.5605 227.1992 408.4932 c227.0845 408.5557 227.0327 408.6904 227.0742 408.8076 c227.0864 408.8408 227.1602 409.0293 227.3022 409.3135 c227.4219 409.5527 227.4131 409.8359 227.2798 410.0664 cf0.65 0.58 0.7 0 k207.4683 410.6943 m207.5171 410.6943 207.5669 410.6982 207.6162 410.708 c207.9009 410.7607 208.1338 410.9658 208.2241 411.2412 c208.5498 412.2344 209.5112 413.166 211.1636 414.0898 c211.3931 414.2188 211.5444 414.4521 211.5679 414.7129 c211.5913 414.9756 211.4844 415.2305 211.2813 415.3984 c210.5938 415.9648 209.9575 416.5918 209.3906 417.2627 c209.1191 417.583 208.6455 417.6367 208.3091 417.3867 c206.7012 416.1914 205.8687 414.9082 205.835 413.5723 c205.834 413.5186 205.8384 413.4648 205.8481 413.4111 C206.0142 412.4951 L206.022 412.4531 206.0337 412.4102 206.0479 412.3701 c206.2197 411.8906 206.4912 411.4248 206.855 410.9834 c207.0078 410.7979 207.2334 410.6943 207.4683 410.6943 cf0.34 0.53 1 0 k208.187 418.9229 m207.9561 419.2871 207.48 419.4004 207.1108 419.1826 c206.8848 419.0488 206.7617 418.8184 206.7373 418.5752 C206.605 418.5762 206.4707 418.5566 206.3472 418.4883 C191.5356 410.3672 L191.2466 410.207 191.085 409.8867 191.1309 409.5596 c191.1768 409.2324 191.4209 408.9668 191.7427 408.8945 C205.5737 405.7676 L205.6323 405.7539 205.6909 405.748 205.749 405.748 c205.9521 405.748 206.1499 405.8252 206.2998 405.9688 c206.4922 406.1543 206.5791 406.4219 206.5313 406.6846 C205.5327 412.1787 L205.5264 412.2178 205.5161 412.2549 205.5039 412.293 c205.3672 412.6943 205.2983 413.0977 205.2983 413.4932 c205.2983 414.376 205.6392 415.7354 207.2627 417.2012 c207.4014 417.3262 207.48 417.4912 207.5078 417.6641 C207.5195 417.6641 207.5298 417.6543 207.5415 417.6543 c207.5469 417.6543 207.5513 417.6543 207.5566 417.6543 c207.8521 417.6602 208.1201 417.8301 208.2529 418.0947 C208.2363 418.1025 L208.2612 418.1543 208.2808 418.209 208.2964 418.2637 c208.356 418.4795 208.3066 418.7344 208.187 418.9229 cf0.73 0.67 0.74 0 k207.2144 405.8926 m207.2715 405.5791 207.5098 405.3301 207.8208 405.2588 C246.0889 396.6084 L246.1465 396.5967 246.2056 396.5898 246.2642 396.5898 c246.418 396.5898 246.5703 396.6338 246.7007 396.7207 c246.8813 396.8389 247.0054 397.0254 247.0454 397.2373 C249.0889 408.0664 L249.1484 408.3809 249.0127 408.7012 248.7451 408.8779 c248.4756 409.0547 248.1284 409.0518 247.8633 408.873 c243.7007 406.0684 236.3428 404.3926 228.1812 404.3926 c219.7329 404.3926 212.0034 406.2432 208.0088 409.2207 c207.7471 409.416 207.3921 409.4307 207.1147 409.2588 c206.8369 409.0869 206.6929 408.7617 206.7515 408.4414 C207.2144 405.8926 Lf0.34 0.53 1 0 k248.1577 396.1406 m251.5322 395.3789 L251.5908 395.3652 251.6489 395.3594 251.7075 395.3594 c251.9224 395.3594 252.1304 395.4463 252.2822 395.6045 c252.4756 395.8076 252.5483 396.0957 252.4741 396.3643 c251.8574 398.6191 250.7886 402.6719 250.5703 404.4863 C250.5586 404.5918 L250.5195 404.9844 250.1978 405.291 249.8022 405.3076 C249.4214 405.3379 249.0591 405.0508 248.9858 404.6621 C247.5522 397.0645 L247.4727 396.6436 247.7407 396.2363 248.1577 396.1406 Cf0.73 0.67 0.74 0 k253.8799 394.8486 m259.2437 393.6348 L259.3027 393.623 259.3608 393.6162 259.4189 393.6162 c259.7163 393.6162 259.9951 393.7832 260.1313 394.0576 c260.2944 394.3867 260.2109 394.7842 259.9302 395.0205 c259.1538 395.6709 258.6431 396.4834 258.4106 397.4346 c258.334 397.749 258.0171 397.9824 257.6978 398.0303 C256.0122 398.707 254.5806 399.4844 253.4434 400.3379 c253.1738 400.5391 252.8066 400.5498 252.5249 400.3633 c252.2446 400.1768 252.1123 399.833 252.1953 399.5059 c252.5322 398.1797 252.9126 396.7578 253.2896 395.4102 c253.3682 395.1279 253.5952 394.9131 253.8799 394.8486 Cf265.8477 392.1426 m295.6123 385.4141 L295.6704 385.4014 295.7295 385.3945 295.7876 385.3945 c295.9556 385.3945 296.1211 385.4473 296.2588 385.5488 c296.4448 385.6855 296.5615 385.8965 296.5806 386.127 c296.5825 386.1504 296.5825 386.1865 296.5815 386.2236 C298.813 399.1514 L298.8687 399.4736 298.7212 399.7979 298.4409 399.9668 c298.1626 400.1367 297.8066 400.1162 297.5464 399.918 c293.5313 396.8447 285.5093 395.083 275.5371 395.083 c273.4668 395.083 271.3579 395.1904 269.269 395.4033 c269.0483 395.4238 268.8242 395.3525 268.6582 395.2051 c268.2285 394.8193 267.8359 394.5273 267.4229 394.2891 c266.9731 394.0283 266.4434 393.8281 265.8481 393.6934 c265.4854 393.6123 265.228 393.2891 265.228 392.9189 c265.228 392.5459 265.4854 392.2246 265.8477 392.1426 Cf0.34 0.53 1 0 k297.6304 384.959 m299.125 384.6211 L299.1826 384.6064 299.2422 384.6006 299.3008 384.6006 c299.5039 384.6006 299.7012 384.6797 299.8516 384.8223 c300.0439 385.0088 300.1309 385.2773 300.082 385.541 C299.2988 389.791 L299.2285 390.1699 298.9297 390.4766 298.5122 390.4424 C298.1274 390.4404 297.7988 390.1621 297.7334 389.7813 C297.1094 386.1309 L297.1084 386.1279 297.0645 386.0225 297.0635 386.0195 c296.98 385.8037 296.9951 385.5635 297.1035 385.3584 c297.2124 385.1553 297.4043 385.0088 297.6304 384.959 Cf0.19 0.87 0.78 0 k301.375 384.1123 m332.3906 377.1006 L332.4492 377.0879 332.5068 377.082 332.5664 377.082 c332.7275 377.082 332.8857 377.1309 333.0205 377.2246 C340.4697 382.4199 L340.7813 382.6377 340.8955 383.0459 340.7422 383.3936 c340.5889 383.7412 340.21 383.9316 339.8418 383.8486 c335.8242 382.9541 331.3691 382.4824 326.957 382.4824 c316.0498 382.4824 306.2334 385.166 301.3389 389.4873 c301.084 389.7109 300.7148 389.75 300.4209 389.583 c300.126 389.416 299.9697 389.0811 300.0293 388.7471 C300.7676 384.7432 L300.8262 384.4307 301.0654 384.1826 301.375 384.1123 Cf0.5 0.78 1 0 k345.1074 385.8828 m345.293 385.8662 345.4785 385.915 345.6318 386.0215 C351.0732 389.8184 L351.2656 389.9531 351.3877 390.165 351.4111 390.3965 c351.4316 390.6299 351.3506 390.8604 351.1875 391.0273 c350.7422 391.4824 350.1855 391.9844 349.5801 392.4814 c348.8955 393.0391 348.4619 393.082 347.8037 393.1475 c347.4951 393.1777 347.1533 393.2119 346.7363 393.3018 c345.8242 393.501 345.3467 394.0908 344.9209 394.6191 c344.6465 394.958 344.3867 395.2783 344.0313 395.4639 c343.5469 395.7148 342.8711 395.832 341.9033 395.832 c341.4385 395.832 340.959 395.8057 340.502 395.7803 c340.1934 395.7627 339.9023 395.749 339.625 395.7412 c339.3555 395.7344 339.1084 395.5898 338.9678 395.3594 c336.334 391.0117 335.0479 386.9512 335.0352 386.9092 c334.9941 386.7813 334.876 386.7207 334.7129 386.7354 C334.5674 386.7773 334.3359 386.7676 334.1924 386.7256 C334.1475 386.7256 334.1055 386.7373 334.0674 386.7607 c333.1143 387.3262 332.1055 386.9824 330.8145 386.3232 c330.0703 385.9443 329.2266 385.5156 328.3398 385.5156 c327.832 385.5156 327.3574 385.6592 326.8877 385.9512 c326.4287 386.2383 326.1572 386.6426 325.8896 387.04 c325.6904 387.3359 325.5449 387.541 325.3779 387.6719 c325.1592 387.8428 324.875 387.8799 324.6318 387.7959 C324.5742 387.7813 324.4854 387.7549 324.3652 387.709 c323.9189 387.5332 323.6514 387.1768 323.3691 386.7979 c322.833 386.084 322.2383 385.5488 321.124 385.8926 c321.0078 385.9277 320.9307 386.0381 320.9375 386.1602 c320.9492 386.3896 320.8613 386.6133 320.6953 386.7734 c320.4658 386.9961 320.1367 387.0996 319.6621 387.0996 c319.3203 387.0996 318.8096 387.04 318.4033 386.8711 c318.1719 386.7744 317.998 386.5752 317.9375 386.332 c317.9258 386.2871 317.8916 386.2051 317.7949 386.1582 c317.6826 386.1055 317.5205 386.1182 317.4414 386.2842 c317.3174 386.5449 317.4551 386.7832 317.5488 386.9014 c317.6992 387.0918 317.7529 387.3398 317.6982 387.5762 c317.0322 390.3955 315.8691 393.4551 314.2373 396.6689 c314.1074 396.9238 313.8535 397.0879 313.5703 397.1035 c313.2861 397.1162 313.0156 396.9814 312.8613 396.7432 c312.8301 396.6953 312.7754 396.6357 312.6885 396.6211 c312.2227 396.543 311.6045 396.5342 310.8867 396.5488 c310.6797 396.5527 310.4766 396.5566 310.2773 396.5566 c309.9131 396.5566 309.4375 396.5449 308.9854 396.4551 c307.8838 396.2363 307.3291 395.623 306.6846 394.9131 c306.5195 394.7305 306.3516 394.5439 306.167 394.3564 c305.5811 393.7598 304.8584 393.6699 304.1563 393.583 c303.5029 393.501 302.8848 393.4238 302.3965 392.9395 c301.7529 392.3018 301.7627 391.4824 301.7744 390.5371 C301.7773 390.2041 L301.7764 390.1895 301.7754 390.1748 301.7754 390.1602 c301.7754 389.9209 301.8828 389.6943 302.0693 389.543 c306.9424 385.5762 316.7129 383.0127 326.957 383.0127 c333.5381 383.0127 339.9453 384.0283 344.998 385.8721 C345.1074 385.8828 Lf0 0.8 0.58 0 k352.377 390.9014 m352.5352 390.9014 352.6934 390.9492 352.8311 391.0449 C354.2354 392.0254 L354.4639 392.1846 354.5928 392.4531 354.5732 392.7314 c354.5674 392.8174 354.5781 392.8496 354.583 392.8584 c354.9541 393.6563 355.1426 394.4746 355.1426 395.292 c355.1426 398.4375 352.376 401.4395 347.3535 403.7441 c347.1074 403.8574 346.8213 403.8379 346.5928 403.6914 c344.4014 402.291 342.333 400.2412 340.4453 397.6006 c340.2686 397.3525 340.248 397.0254 340.3936 396.7578 c340.5391 396.4902 340.8379 396.3203 341.1279 396.3438 C341.3906 396.3555 341.6553 396.3643 341.9209 396.3643 c342.9609 396.3643 343.71 396.2266 344.2764 395.9336 c344.7305 395.6963 345.0254 395.332 345.3379 394.9463 c345.7402 394.4482 346.1191 393.9785 346.8496 393.8193 c347.2363 393.7363 347.5547 393.7031 347.8574 393.6748 c348.5566 393.6064 349.1084 393.5508 349.915 392.8916 c350.2549 392.6143 351.1191 391.8877 351.792 391.1572 c351.9473 390.9893 352.1602 390.9014 352.377 390.9014 cf0.73 0.67 0.74 0 k369.9834 413.5684 m369.9834 413.8213 369.8633 414.0596 369.6592 414.21 c369.4551 414.3594 369.1924 414.4033 368.9502 414.3271 c364.4043 412.8955 358.9629 412.1396 353.2148 412.1396 c350.6445 412.1396 348.0791 412.2988 345.5879 412.6123 c345.3311 412.6445 345.0762 412.5508 344.9014 412.3604 c343.4932 410.8232 342.1387 409.2422 340.877 407.6602 c340.707 407.4492 340.6572 407.167 340.7432 406.9102 c340.8291 406.6563 341.0381 406.4609 341.3008 406.3926 c342.2852 406.1406 343.0762 405.917 343.7764 405.6934 C343.7969 405.6816 343.8193 405.6719 343.8389 405.6641 c343.998 405.6045 344.168 405.5947 344.3311 405.6387 c347.2012 406.4092 349.665 406.5713 351.2256 406.5713 c352.5127 406.5713 353.2881 406.4629 353.3721 406.4521 c353.5059 406.4326 353.6045 406.3135 353.5977 406.1768 c353.5908 406.0391 353.4824 405.9316 353.3447 405.9248 c351.8965 405.8574 350.4521 405.5381 349.0547 404.9727 c348.7676 404.8574 348.5742 404.5859 348.5576 404.2764 c348.542 403.9678 348.7061 403.6787 348.9795 403.5332 c353.2949 401.2422 355.6719 398.3154 355.6719 395.293 c355.6719 395.0654 355.6582 394.8369 355.6328 394.6104 c355.5967 394.2998 355.7471 393.998 356.0146 393.8369 c356.1406 393.7617 356.2813 393.7246 356.4219 393.7246 c356.5811 393.7246 356.7412 393.7725 356.8779 393.8672 C368.1758 401.75 L369.9834 403.0967 L369.9834 413.5684 Lf0.34 0.53 1 0 k369.9834 402.4111 m369.9834 403.0967 L368.1758 401.75 L368.5146 401.9863 L368.5361 401.9561 L368.6729 401.7607 368.8877 401.6475 369.1152 401.626 C368.9805 401.6133 368.8486 401.5732 368.7334 401.4932 C334.5098 377.6172 L333.6855 377.042 332.9648 376.5391 332.6953 376.4297 C332.6123 376.4873 332.5195 376.5293 332.4199 376.5508 C189.0293 408.9639 L188.9927 408.9717 188.9409 408.9775 188.8936 408.9795 C188.8701 408.9932 188.8452 409.0078 188.8174 409.0244 c188.7051 409.0908 188.6582 409.2285 188.7065 409.3496 c188.7358 409.4238 188.7876 409.4639 188.8281 409.4863 c188.9766 409.5674 203.6543 417.6162 206.5137 419.1846 C206.6968 419.1367 206.895 419.1523 207.0771 419.2451 c207.4595 419.4385 207.6191 419.9023 207.437 420.291 c207.0439 421.1284 206.7334 422.0127 206.5132 422.918 c206.4551 423.1567 206.2896 423.3555 206.0649 423.4561 c205.8403 423.5566 205.583 423.5474 205.3657 423.4316 C177.2607 408.4102 L176.9683 408.2529 176.8037 407.9316 176.8472 407.6025 c176.8911 407.2744 177.1343 407.0078 177.4575 406.9336 C333.2695 371.0967 L333.3271 371.083 333.3867 371.0762 333.4473 371.0762 c333.6104 371.0762 333.7715 371.126 333.9072 371.2227 C369.6475 396.5654 L369.8594 396.7148 369.9834 396.957 369.9834 397.2148 C369.9834 400.8418 L369.9834 401.1377 369.8193 401.4092 369.5566 401.5449 c369.4463 401.6035 369.3242 401.6182 369.2051 401.6201 C369.2793 401.6221 369.3535 401.6299 369.4268 401.6533 c369.7588 401.7568 369.9834 402.0645 369.9834 402.4111 Cf369.6563 485.166 m369.5508 485.2422 369.4248 485.293 369.2871 485.3101 C231.0483 502.1694 L230.9238 502.1846 230.8013 502.1709 230.6846 502.1284 C227.1958 500.8823 L226.8496 500.7588 226.6333 500.4136 226.6729 500.0479 c226.7129 499.6821 226.998 499.3916 227.3633 499.3452 C369.0977 481.3242 L369.1318 481.3198 369.165 481.3179 369.1982 481.3179 c369.3887 481.3179 369.5752 481.3867 369.7197 481.5137 c369.8916 481.6626 369.9912 481.8779 369.9932 482.1045 c370.0059 483.2783 370.0332 483.9648 370.085 484.3999 c370.1113 484.6211 369.9912 484.8447 369.8467 485.0137 c369.7949 485.0737 369.7285 485.125 369.6563 485.166 Cf217.8867 500.1226 m217.8872 432.0522 L217.8872 431.7729 218.0337 431.5142 218.2734 431.3701 c218.3994 431.2949 218.5405 431.2573 218.6826 431.2573 c218.8115 431.2573 218.9404 431.2886 219.0571 431.3511 C220.2065 431.9653 L220.4814 432.1123 220.645 432.4067 220.6255 432.7173 c220.3247 437.4482 222.0522 440.8164 222.1255 440.957 c222.1719 441.0449 222.2773 441.1118 222.3901 441.0986 c224.5474 440.8594 226.5605 439.5122 228.375 437.0952 c228.6084 436.7827 229.0391 436.6865 229.3857 436.8711 C234.6182 439.668 L234.8901 439.8135 235.0537 440.103 235.0376 440.4106 c235.0361 440.4365 235.0327 440.4678 235.0273 440.5 C235.0278 480.7358 L235.0278 481.1338 234.7339 481.4707 234.3394 481.5239 C222.647 483.1074 L222.6211 483.1143 222.5952 483.1191 222.5688 483.1235 c222.5039 483.1343 222.4351 483.1357 222.3711 483.1299 c222.3525 483.1279 222.3267 483.124 222.2988 483.1187 C222.1772 483.1426 222.085 483.2505 222.085 483.3794 C222.085 499.5474 L222.085 499.6763 222.1768 499.7837 222.2983 499.8071 C222.3291 499.8013 222.3584 499.7954 222.377 499.7935 c222.5635 499.7666 222.7607 499.814 222.9204 499.9209 C223.0503 499.9248 223.1782 499.9609 223.292 500.0269 c223.3018 500.0327 223.3452 500.0605 223.3789 500.083 C230.7427 502.7124 L230.4746 503.4614 L230.8638 502.7261 L234.1357 502.3267 L234.3604 502.3018 234.5884 502.3696 234.7593 502.521 c234.9302 502.6724 235.0273 502.8887 235.0273 503.1162 C235.0273 503.2944 L235.0273 507.689 233.8975 510.8906 231.8452 512.3096 c230.4253 513.2905 228.6069 513.4136 226.5156 512.6299 C226.1758 512.5425 218.186 510.3755 217.8867 500.1226 Cf0.429688 0.535156 0.992188 0.007813 k213.4839 429.4351 m214.0146 429.416 214.4873 429.3765 214.9282 429.3154 c214.9644 429.3105 215.0015 429.3081 215.0376 429.3081 c215.168 429.3081 215.2969 429.3403 215.4121 429.4023 C216.937 430.2178 L217.1958 430.356 217.3574 430.625 217.3574 430.9189 C217.3569 500.1304 L217.5298 506.0605 220.2813 509.3818 222.5586 511.124 c222.8643 511.3579 222.9585 511.7773 222.7822 512.1201 c222.606 512.4619 222.2119 512.6284 221.8413 512.5156 C221.7139 512.4805 L221.6021 512.4507 221.4912 512.4199 221.3286 512.3652 C221.084 512.3198 215.3232 511.1709 213.3613 504.5215 c213.3418 504.4541 213.3306 504.3848 213.3286 504.3149 c213.3281 504.2769 213.3047 504.229 213.2856 504.1958 c213.25 504.1323 213.2227 504.0654 213.2051 503.9946 c212.9233 502.8799 212.7598 501.6855 212.7183 500.4189 C212.7178 430.2295 L212.7178 429.8018 213.0562 429.4507 213.4839 429.4351 cf0.34 0.53 1 0 k210.0459 501.0195 m211.3843 500.8457 L211.4185 500.8413 211.4526 500.8389 211.4868 500.8389 c211.6665 500.8389 211.8418 500.9004 211.9839 501.0137 c212.1523 501.1484 212.2593 501.3467 212.2788 501.5625 C212.3032 501.8687 L212.3149 502.0322 212.3267 502.1963 212.3472 502.3501 c212.3857 502.6377 212.2651 502.9233 212.0322 503.0957 c211.7983 503.2681 211.4897 503.3003 211.2275 503.1792 C209.8169 502.5308 L209.4941 502.3828 209.3096 502.0391 209.3623 501.6885 c209.4155 501.3379 209.6943 501.0654 210.0459 501.0195 Cf0.429688 0.535156 0.992188 0.007813 k208.4292 485.0645 m211.291 484.6914 L211.3252 484.687 211.3594 484.6846 211.3936 484.6846 c211.5854 484.6846 211.7725 484.7539 211.9185 484.8823 c212.0903 485.0337 212.1885 485.251 212.1885 485.48 C212.1885 497.4004 L212.1885 498.2969 212.1895 498.9717 212.1982 499.4932 c212.2046 499.8979 211.9067 500.2427 211.5054 500.2949 c210.1904 500.4663 209.1875 500.5981 208.4536 500.7124 c208.2236 500.7466 207.9873 500.6807 207.8101 500.5264 c207.6338 500.3726 207.5337 500.1489 207.5366 499.915 C207.7368 485.8413 L207.7422 485.4463 208.0376 485.1147 208.4292 485.0645 Cf0.65 0.08 0.95 0 k227.7622 410.9336 m227.7959 410.9268 227.8291 410.9219 227.8564 410.9199 c227.8809 410.916 227.9058 410.915 227.9297 410.915 c228.1646 410.915 228.3892 411.0186 228.541 411.2012 C228.7681 411.4561 L228.9395 411.6494 229.0063 411.9131 228.9478 412.1641 c228.939 412.2021 228.9375 412.2383 228.9434 412.2715 c229.0244 412.707 229.1436 413.2529 229.3013 413.8682 c229.396 414.2373 229.2158 414.6221 228.8716 414.7852 c228.8193 414.8105 228.752 414.8574 228.728 414.9385 c228.7017 415.0283 226.0146 424.0015 218.9795 427.5186 c215.5352 429.2427 211.5283 429.3745 207.2012 427.9033 c206.897 427.7998 206.6846 427.5234 206.6636 427.2021 c206.5586 425.5957 206.6372 421.4624 209.6289 417.792 c213.0732 413.5645 219.1763 411.2568 227.7622 410.9336 Cf0.429688 0.535156 0.992188 0.007813 k332.791 370.6621 m176.0454 406.7139 L175.7949 406.7695 175.5293 406.7031 175.3369 406.5303 c175.1445 406.3574 175.0474 406.1035 175.0776 405.8467 C179.5898 367.2441 L179.6279 366.917 179.8633 366.6475 180.1816 366.5664 C332.4141 327.3301 L332.4795 327.3135 332.5469 327.3057 332.6123 327.3057 c332.7871 327.3057 332.959 327.3633 333.0996 327.4727 c333.2939 327.6221 333.4082 327.8545 333.4082 328.1006 C333.4082 369.8877 L333.4082 370.2588 333.1514 370.5801 332.791 370.6621 Cf0.34 0.53 1 0 k369.5537 395.3203 m369.2891 395.4561 368.9707 395.4346 368.7285 395.2627 C334.2734 370.832 L334.0625 370.6836 333.9375 370.4414 333.9375 370.1846 C333.9375 328.8232 L333.9375 328.5234 334.1055 328.25 334.373 328.1143 c334.4863 328.0576 334.6104 328.0283 334.7334 328.0283 c334.8984 328.0283 335.0635 328.0801 335.2031 328.1816 C369.6582 353.4209 L369.8633 353.5703 369.9834 353.8086 369.9834 354.0615 C369.9834 394.6143 L369.9834 394.9121 369.8174 395.1846 369.5537 395.3203 cf0.429688 0.535156 0.992188 0.007813 k380.3867 495.1626 m380.6934 495.3955 380.7881 495.8149 380.6143 496.1577 c380.4385 496.5005 380.043 496.667 379.6738 496.5566 c379.5068 496.5059 379.3408 496.4497 379.123 496.374 C378.7861 496.311 370.8545 494.7119 370.5137 484.4277 C370.5137 354.4277 L370.5137 354.0596 370.7656 353.7402 371.124 353.6533 C374.1719 352.9248 L374.2344 352.9102 374.2969 352.9014 374.3574 352.9014 c374.5342 352.9014 374.709 352.9619 374.8496 353.0732 c375.042 353.2236 375.1523 353.4551 375.1523 353.6973 C375.1514 484.1392 L375.3252 490.0938 378.0938 493.4209 380.3867 495.1626 cf0.34 0.53 1 0 k392.3867 461.1191 m392.1191 461.2544 391.7959 461.228 391.5557 461.0493 C390.8516 460.5327 L390.8418 460.5283 390.7695 460.4854 390.7588 460.48 C390.6367 460.4634 L382.4072 461.5342 L382.2773 461.5513 382.1777 461.6646 382.1777 461.7969 C382.1777 479.2363 L382.1904 479.2969 382.2051 479.3633 382.207 479.3965 C382.207 479.3984 382.2627 479.4868 382.2627 479.4878 C382.2754 479.5029 382.2871 479.5176 382.2998 479.5327 C382.3164 479.5469 382.335 479.564 382.3535 479.5825 C388.123 483.5977 L388.2246 483.6689 388.3672 483.6421 388.4561 483.5444 c388.5908 483.3994 388.7734 483.3091 388.9678 483.291 C391.9541 483.0132 L392.1748 482.9878 392.3965 483.0664 392.5625 483.2173 c392.7285 483.3677 392.8232 483.5811 392.8232 483.8047 C392.8232 487.3032 L392.8232 491.6978 391.6924 494.8994 389.6406 496.3174 c388.2197 497.2993 386.4043 497.4224 384.3105 496.6387 C383.9707 496.5513 375.9824 494.3843 375.6816 484.1313 C375.6826 354.457 L375.6826 354.1563 375.8516 353.8809 376.1211 353.7471 c376.2324 353.6895 376.3555 353.6621 376.4785 353.6621 c376.6445 353.6621 376.8125 353.7148 376.9512 353.8174 C392.5 365.3252 L392.7031 365.4756 392.8232 365.7129 392.8232 365.9639 C392.8232 460.4097 L392.8232 460.71 392.6533 460.9844 392.3867 461.1191 cf420.3535 431.3096 m420.0869 431.4551 419.7578 431.4355 419.5107 431.2568 C393.9121 412.8994 L393.5791 412.7959 393.3535 412.4873 393.3535 412.1396 C393.3535 372.2842 L393.3535 371.9854 393.5215 371.7109 393.7881 371.5762 c393.9023 371.5176 394.0244 371.4883 394.1484 371.4883 c394.3145 371.4883 394.4775 371.54 394.6162 371.6416 C418.4531 389.0234 L418.6475 389.167 418.7676 389.3877 418.7803 389.6279 C420.7676 430.5723 L420.7822 430.8774 420.623 431.1641 420.3535 431.3096 cfU0 0.25 1 0 k273.4639 409.665 m273.3403 409.9443 273.1831 410.1992 273.0005 410.4307 C272.7153 411.1914 272.0981 411.8662 271.2397 412.2051 c270.439 412.5234 269.4492 412.3672 268.7363 411.9219 c268.7324 411.9199 268.73 411.918 268.7271 411.916 C268.583 411.958 268.4297 411.9795 268.2627 411.957 c267.1641 411.8145 265.7295 411.6777 264.8633 410.8857 c263.8613 409.9688 264.1201 408.5195 264.9453 407.585 c266.1567 406.2109 268.5068 405.7402 270.2432 405.668 c271.1519 405.6289 272.1211 405.7842 272.8652 406.3369 c273.8809 407.0889 273.9331 408.5986 273.4639 409.665 cf294.375 417.5967 m293.8135 417.9434 293.1943 418.2119 292.5488 418.3975 C292.4395 418.458 292.3232 418.5098 292.1924 418.5381 c291.7822 418.623 291.3413 418.6572 290.896 418.6641 C289.5039 418.7363 288.1064 418.4092 286.9756 417.5576 c286.1367 416.9248 286.4927 415.5576 287.2329 414.957 C287.3594 414.6748 287.5308 414.4053 287.7861 414.1816 c288.895 413.21 290.3242 413.2432 291.7007 413.499 c292.8433 413.7109 294.3271 414.1074 294.9873 415.1611 c295.4873 415.96 295.1646 417.1104 294.375 417.5967 cfUu*u1 D0.925781 0.875 0.886719 0.796875 k422.1084 432.9102 m422.1045 432.9268 422.0957 432.9409 422.0898 432.9575 c422.0605 433.0522 422.0176 433.1401 421.9619 433.2217 c421.9434 433.2495 421.9238 433.2744 421.9023 433.3008 c421.8438 433.3701 421.7764 433.4307 421.7002 433.4829 c421.6787 433.498 421.6611 433.5156 421.6387 433.5288 c421.6309 433.5332 421.626 433.54 421.6182 433.5439 c421.5205 433.5972 421.416 433.6274 421.3105 433.6455 c421.2998 433.647 421.292 433.6538 421.2822 433.6553 C394.0889 437.5439 L394.0889 461.5562 L394.0889 461.6675 394.0596 461.77 394.0254 461.8701 C396.8193 463.9321 L397.0742 464.1201 397.2246 464.418 397.2256 464.7349 C397.2607 482.2554 L397.2607 482.356 397.2441 482.4531 397.2158 482.5464 c397.21 482.5649 397.1992 482.5806 397.1924 482.5991 c397.1592 482.6904 397.1123 482.7744 397.0547 482.8521 c397.0352 482.8774 397.0156 482.9014 396.9941 482.9253 c396.9277 482.999 396.8506 483.063 396.7627 483.1147 c396.749 483.1226 396.7393 483.1338 396.7246 483.1411 c396.7207 483.1436 396.7178 483.147 396.7139 483.1489 c396.6104 483.2012 396.5 483.228 396.3887 483.2422 c396.376 483.2441 396.3662 483.252 396.3535 483.2529 C394.0889 483.4639 L394.0889 487.2148 L394.0889 493.3955 392.0615 496.0942 390.3604 497.2695 c389.3105 497.9951 388.0723 498.3433 386.7939 498.3325 C386.7412 498.3379 386.6895 498.3389 386.6309 498.3369 c385.8105 498.2939 385.0635 498.2725 384.3721 498.252 c382.2197 498.1895 380.5137 498.1396 378.8008 497.5093 C377.833 497.29 370.7119 495.3672 369.4395 486.4775 C236.2925 502.7158 L236.2925 503.2061 L236.2925 509.3872 234.2651 512.0854 232.5649 513.2612 c231.4976 513.9985 230.2671 514.3457 228.9302 514.3149 C228.8979 514.3159 228.8687 514.3306 228.8354 514.3281 c228.0146 514.2852 227.2666 514.2637 226.5752 514.2432 c224.4233 514.1807 222.7178 514.1313 221.0059 513.5005 C220.1348 513.3032 214.2939 511.7134 212.1997 504.9292 C206.8374 502.4653 L206.3838 502.2573 206.1802 501.7539 206.311 501.2886 C206.2856 501.1978 206.2534 501.1084 206.2549 501.0122 C206.4844 484.8169 L206.4917 484.3198 206.8623 483.9038 207.3555 483.8394 C211.3896 483.314 L211.4111 483.311 211.4321 483.3115 211.4531 483.3101 C211.4526 430.0322 L209.7393 429.8765 207.9609 429.4585 206.123 428.7734 c205.79 428.6494 205.5479 428.3579 205.4868 428.0078 c205.4678 427.8975 205.2651 426.6333 205.4385 424.8149 C174.1714 408.1035 L174.1006 408.0664 174.0337 408.0205 173.9727 407.9658 c173.9424 407.9385 173.9199 407.9053 173.8936 407.875 c173.8784 407.8584 173.8633 407.8428 173.8496 407.8252 c173.7813 407.7363 173.729 407.6377 173.6943 407.5322 c173.6875 407.5117 173.6846 407.4912 173.6792 407.4707 c173.6528 407.3691 173.6406 407.2656 173.6475 407.1592 c173.6479 407.1455 173.6455 407.1328 173.647 407.1201 c173.6475 407.1152 173.6465 407.1094 173.647 407.1045 C178.418 366.2861 L178.4658 365.876 178.7612 365.5371 179.1616 365.4336 C333.4229 325.6748 L333.5059 325.6543 333.5898 325.6436 333.6729 325.6436 c333.7793 325.6436 333.8857 325.6621 333.9883 325.6953 c334.0225 325.707 334.0527 325.7305 334.0859 325.7461 c334.1465 325.7734 334.209 325.7969 334.2637 325.8369 C370.5342 352.4053 L375.1855 351.292 L375.2627 351.2734 375.3398 351.2646 375.418 351.2646 c375.418 351.2646 375.4189 351.2646 v375.4189 351.2646 l375.5254 351.2646 375.6318 351.2832 375.7354 351.3184 c375.7744 351.3311 375.8076 351.3564 375.8447 351.374 c375.9014 351.4014 375.96 351.4219 376.0127 351.4609 C393.6836 364.5381 L393.9385 364.7266 394.0889 365.0244 394.0889 365.3418 C394.0889 369.6201 L394.1133 369.6348 394.1406 369.6406 394.1641 369.6582 C419.6094 388.2119 L419.8545 388.3896 420.0049 388.6689 420.0195 388.9707 C422.1396 432.6172 L422.1445 432.7178 422.1328 432.8154 422.1084 432.9102 cf0 D418.5391 432.0273 m394.0889 414.4619 L394.0889 418.29 L394.207 418.3184 394.3232 418.3613 394.4287 418.4346 C409.3428 428.8408 L409.6787 429.0752 409.8379 429.4902 409.7441 429.8892 c409.6514 430.2876 409.3242 430.5889 408.9199 430.6499 C394.0889 432.8843 L394.0889 435.5239 L418.5391 432.0273 Lf394.0889 430.8618 m406.1416 429.0459 L394.0889 420.6367 L394.0889 430.8618 Lf395.2266 465.2422 m391.6719 462.6187 L391.6719 477.6558 L395.2568 480.2822 L395.2266 465.2422 Lf383.4424 478.0942 m389.6719 477.2842 L389.6719 461.7764 L383.4424 462.5869 L383.4424 478.0942 Lf385.1387 479.8906 m388.1787 482.0054 L392.6826 481.5859 L392.8076 481.5303 392.9434 481.4961 393.0889 481.4961 c393.1514 481.4961 393.2061 481.521 393.2656 481.5317 C393.543 481.5059 L390.4043 479.2061 L385.1387 479.8906 Lf220.1592 430.417 m220.3188 429.5747 220.5527 428.7041 220.8662 427.8149 C220.4463 428.0791 220.0117 428.3281 219.5576 428.5557 c219.0337 428.8184 218.4985 429.043 217.9551 429.2388 C220.1592 430.417 Lf224.2114 425.3726 m220.3677 431.7783 222.1685 437.6841 222.9531 439.625 C227.1563 438.5552 229.6543 432.4116 230.2217 430.8647 C227.9995 427.8652 227.1592 424.1982 226.8467 421.709 C226.1475 422.7847 225.3169 423.8872 224.3403 424.9253 C224.3306 425.0786 224.2959 425.2314 224.2114 425.3726 cf223.3496 498.4917 m369.249 479.9404 L369.249 464.4395 L223.3496 484.1997 L223.3496 498.4917 Lf334.1143 388.043 m332.9326 388.4785 331.8477 388.1289 330.9014 387.6865 C332.0859 392.3652 334.3994 396.9248 337.0352 401.001 C337.1416 401.0254 337.248 401.0586 337.3457 401.1211 c340.2832 402.9785 343.1953 404.0107 345.708 404.5723 C338.8135 400.0674 335.1279 390.8965 334.1143 388.043 Cf339.5059 404.5752 m339.6875 404.8223 339.8701 405.0693 340.0527 405.3115 C340.3008 405.2529 340.5449 405.1904 340.7891 405.1289 C340.3652 404.9561 339.9375 404.7764 339.5059 404.5752 Cf328.6348 386.7207 m328.2578 386.6602 327.916 386.7109 327.5596 386.9346 c327.3281 387.0791 327.1416 387.3564 326.9443 387.6494 c326.7373 387.9561 326.4424 388.3828 326.0029 388.6768 C326.458 391.9531 329.3623 406.6855 345.3545 414.6426 C340.0771 409.1621 331.0029 398.3428 328.6348 386.7207 Cf318.8164 388.2031 m316.585 397.1172 310.3613 405.8105 306.8945 410.1445 C315.1309 406.5215 319.373 399.1914 319.4199 399.1084 c319.4658 399.0273 319.5332 398.9688 319.5967 398.9053 C320.0078 395.4805 320.2393 391.877 320.1797 388.2334 C319.7334 388.2969 319.2637 388.2861 318.8164 388.2031 Cf264.2983 394.6963 m262.3613 394.6963 260.0684 395.6406 259.6113 397.7148 c259.4897 398.2676 259.6509 398.8809 259.8369 399.5908 c259.9878 400.165 260.1436 400.7578 260.1738 401.4102 c260.2681 403.459 259.8325 404.6191 258.4478 406.0078 c257.5171 406.9414 256.2505 407.4619 255.0259 407.9648 c253.7314 408.4961 252.5088 408.998 252.1895 409.8271 c251.9707 410.3945 252.1226 411.2334 252.6406 412.3203 c253.6455 414.4297 255.4956 414.8418 258.3521 414.8418 c258.7617 414.8418 259.1729 414.834 259.582 414.8262 c259.999 414.8184 260.4136 414.8115 260.8218 414.8115 c261.7568 414.8115 262.4556 414.8525 263.0874 414.9453 c266.2935 415.417 267.0815 417.585 267.7769 419.4971 c268.229 420.7417 268.6563 421.9175 269.7202 422.7275 c271.0254 423.7217 272.8916 424.292 274.8398 424.292 c276.5415 424.292 278.146 423.8608 279.3574 423.0781 c280.9512 422.0483 282.0698 420.3462 282.207 418.7422 c282.3062 417.5879 281.7524 416.8975 281.0518 416.0244 c280.3975 415.209 279.6563 414.2852 279.4937 412.9219 c279.1792 410.2822 281.3809 409.5654 282.6968 409.1367 c283.0225 409.0303 283.3467 408.9268 283.6411 408.7988 c284.9438 408.2344 285.3804 407.4004 285.5103 405.2275 c285.6611 402.7021 284.7734 399.625 282.4512 398.4443 c281.4888 397.9561 280.7368 398.3496 279.4756 399.0313 c277.917 399.874 276.6226 400.4873 274.3408 400.291 c271.502 400.0469 270.1636 398.5625 268.9824 397.2529 c268.3145 396.5127 267.6841 395.8135 266.7896 395.2959 c266.1211 394.9092 265.2363 394.6963 264.2988 394.6963 c264.2983 394.6963 Lf255.4863 400.4082 m255.4917 400.458 255.5112 400.5029 255.5088 400.5547 c255.4434 401.8896 255.6548 402.543 255.8428 402.8545 c255.9873 403.0938 256.3418 403.3066 256.7173 403.5322 c256.9829 403.6914 257.2524 403.8643 257.5073 404.0684 C258.0938 403.3447 258.2324 402.7305 258.1758 401.5029 c258.1553 401.0615 258.0327 400.5938 257.9028 400.0986 c257.8369 399.8477 257.7729 399.585 257.7153 399.3154 C256.8999 399.6621 256.1445 400.0254 255.4863 400.4082 Cf236.3184 413.3623 m238.457 413.3623 240.8853 412.7734 243.5508 411.6084 C242.1167 410.1836 238.9409 407.6387 234.5513 407.6387 c232.627 407.6387 230.6445 408.125 228.647 409.084 C229.4497 410.5039 231.6475 413.3623 236.3184 413.3623 cf245.2559 410.4854 m245.4248 410.3506 245.6138 410.1758 245.7407 410.0557 c245.9834 409.8281 246.2349 409.5957 246.5059 409.415 C244.9932 408.5234 243.0117 407.7148 240.6265 407.0732 C242.8281 408.1504 244.4014 409.5791 245.2559 410.4854 Cf248.0444 410.4863 m247.9814 410.7158 247.8442 410.9268 247.6274 411.0654 c247.4966 411.1494 247.3013 411.334 247.1128 411.5117 c246.8262 411.7813 246.4888 412.0947 246.1011 412.3281 C246.0078 412.5479 245.8579 412.7383 245.6406 412.8447 c244.8657 413.2236 244.1074 413.5537 243.3623 413.8477 C244.6904 414.9209 245.7925 416.1064 246.7036 417.3125 C248.7002 416.0967 249.7983 414.7266 249.7983 413.4043 c249.7983 412.4326 249.1743 411.4336 248.0444 410.4863 Cf256.6938 463.4209 m256.6895 463.4214 256.6855 463.4238 256.6812 463.4238 c251.208 463.5 249.9731 467.8696 249.6948 469.8701 C253.3359 469.8672 256.0439 468.9736 257.7598 467.1704 C257.2524 466.1094 256.8115 464.8203 256.6938 463.4209 Cf266.6582 468.4346 m267.166 466.5112 268.3999 464.6445 270.3442 462.8584 C268.6772 461.5029 267.1919 459.9424 265.8584 458.2603 C265.9331 460.5337 265.689 463.4824 264.4063 466.1064 C265.1099 466.9785 265.8677 467.7549 266.6582 468.4346 Cf361.2402 422.6333 m359.7861 421.3691 357.0303 419.5771 355.4063 419.832 c355.1465 419.8721 354.9414 419.9717 354.7666 420.1279 C356.2588 421.792 357.4092 423.5381 357.7402 424.1309 c359.5176 427.3149 360.3184 430.6504 360.6221 434.0381 C360.7295 434.2627 L360.8545 434.522 360.8564 434.8086 360.7598 435.0571 C361.3164 436.7456 363.4326 438.7202 364.6465 439.854 c364.9111 440.1001 365.1504 440.3232 365.3516 440.52 c366.7188 441.854 368.0586 442.9248 369.249 443.8242 C369.249 434.7314 L368.959 433.4253 367.4395 430.7407 366.6133 429.2842 C366.1816 428.5171 L365.0215 426.4116 363.4971 424.5972 361.2402 422.6333 cf328.6367 401.7979 m328.2178 403.668 327.4961 406.4541 326.3809 409.4531 C326.4434 409.5664 326.4854 409.6943 326.501 409.832 c326.5078 409.8984 327.0605 414.3945 329.9121 418.166 C329.9521 418.1934 329.9971 418.208 330.0332 418.2422 c330.1494 418.3516 330.2236 418.4834 330.2764 418.623 C331.2432 419.8008 332.4414 420.8867 333.9473 421.7085 C332.9922 418.7988 331.3076 412.9932 329.7402 404.208 c329.707 404.0186 329.7441 403.8398 329.8096 403.6738 C329.3906 403.0449 328.999 402.418 328.6367 401.7979 Cf313.8525 422.5684 m313.8926 422.4678 316.2148 416.5664 318.0381 408.124 C316.9482 407.9678 315.877 407.791 314.8535 407.582 c314.8125 407.5742 314.7822 407.5488 314.7432 407.5352 C312.0381 409.835 308.4814 412.0752 304.0264 413.2705 c303.5967 413.3867 303.1445 413.2031 302.9131 412.8252 c302.6826 412.4453 302.7295 411.959 303.0283 411.6309 c303.0771 411.5771 305.2139 409.2119 307.8389 405.5635 C305.7959 404.7715 304.0264 403.8652 302.5566 402.8672 C303.5635 403.7871 304.2197 405.0674 304.3262 406.4189 c304.4639 408.1572 303.5557 409.54 302.7549 410.7598 c301.8574 412.1279 301.3711 412.9473 301.8203 413.8789 c302.3643 415.0039 303.6875 415.46 305.0898 415.9434 c306.7588 416.5186 308.6514 417.1709 309.3223 419.1504 c309.79 420.5308 309.6016 421.9395 309.1543 423.1943 C310.877 423.291 312.5303 423.4517 314.1074 423.6704 C314.0977 423.6621 314.0859 423.6572 314.0771 423.6484 c313.792 423.3662 313.7041 422.9409 313.8525 422.5684 cf318.9834 403.1865 m318.3262 404.0029 317.5273 404.9131 316.5684 405.8652 C317.1836 405.9736 317.8086 406.0732 318.4443 406.1631 C318.6338 405.1973 318.8145 404.2031 318.9834 403.1865 Cf297.7485 403.833 m296.9917 404.207 296.7031 405.1348 296.3691 406.21 c295.8677 407.8232 295.1807 410.0322 292.272 410.1973 c290.457 410.2979 289.8838 409.624 289.3232 408.7314 c289.1724 408.4912 289.0166 408.2432 288.7832 407.9834 c288.1001 407.2227 287.6665 406.9893 287.3257 406.9229 C287.0474 408.3926 286.3584 409.8018 284.436 410.6348 c284.0864 410.7861 283.7026 410.9121 283.3159 411.0381 c281.7529 411.5479 281.3735 411.7939 281.48 412.6855 c281.5747 413.4795 282.0552 414.0791 282.6113 414.7725 c283.3936 415.7471 284.3672 416.9609 284.2002 418.9121 c284.1152 419.9038 283.772 420.8921 283.2437 421.8101 C283.3555 422.1558 283.2847 422.5483 283.0103 422.8228 c282.3013 423.5322 282.0718 424.3096 282.3091 425.1987 c282.7441 426.8291 284.604 428.3345 285.6431 428.6152 c287.4839 429.1104 287.8384 428.4419 288.5957 426.4351 c289.0483 425.2363 289.561 423.8779 290.79 423.1196 c292.6943 421.9414 294.3745 422.9214 295.6104 423.9531 C295.8672 424.0361 296.0767 424.2207 296.1963 424.4683 C296.2778 424.5435 296.3569 424.6167 296.4331 424.687 c296.6631 424.8999 296.8789 425.105 297.0854 425.3018 c298.4326 426.584 299.1748 427.29 300.9941 427.4253 c303.2266 427.5938 304.3438 427.0713 305.7686 425.1963 c306.4951 424.2427 308.1104 421.8066 307.4277 419.793 c307.0957 418.8125 306.0771 418.3984 304.4375 417.834 c302.791 417.2666 300.9248 416.624 300.0195 414.748 c299.0557 412.752 300.1797 411.0391 301.083 409.6631 c301.7686 408.6182 302.416 407.6328 302.332 406.5762 c302.2471 405.4971 301.5674 404.4443 300.6016 403.8945 c299.7119 403.3877 298.6987 403.3652 297.7485 403.833 cf276.1182 431.1299 m274.9668 431.917 273.7764 432.7305 272.2622 433.3657 c267.7627 435.2554 263.9238 434.6938 260.4468 433.8071 c259.5732 433.5845 258.6533 433.5615 257.6963 433.6343 C258.001 435.1641 258.4409 437.0977 259.0483 439.2583 C259.1743 439.2588 259.2983 439.2637 259.4243 439.2637 c270.7339 439.2637 278.626 435.833 278.7036 432.7358 C278.5757 432.0088 L278.3755 431.4492 277.9453 430.8877 277.2881 430.3447 C276.8833 430.6074 276.4976 430.8706 276.1182 431.1299 cf249.4619 434.3521 m247.4014 434.0513 245.7129 433.4595 244.2998 432.542 c244.1826 432.4658 244.022 432.3716 243.8369 432.2632 c242.835 431.6729 241.9512 431.1069 241.4307 430.4585 C241.2275 430.6362 241.0522 430.8174 240.8936 430.9995 C243.0547 434.2324 L243.251 434.5259 243.2778 434.9014 243.125 435.2197 c243.0088 435.4629 242.8008 435.644 242.5522 435.7305 C245.1377 437.3423 249.4702 438.5347 254.4541 439.0205 C254.3457 437.1289 254.3062 435.457 254.2988 434.1123 C252.7017 434.3701 251.0679 434.5864 249.4619 434.3521 cf256.4854 439.1792 m256.625 439.187 256.7671 439.1909 256.9072 439.1978 C256.7144 438.4785 256.5386 437.7847 256.3818 437.126 C256.4072 437.7749 256.4419 438.4629 256.4854 439.1792 Cf262.2676 448.228 m264.1855 449.2793 L266.1318 443.0742 271.3799 442.4961 273.2354 442.4961 c274.0195 442.4961 274.5308 442.582 274.5864 442.5918 c275.1016 442.6826 275.4595 443.1558 275.4077 443.6763 c275.2026 445.7285 274.8579 447.4453 274.417 448.8862 C286.5215 447.0625 L286.5244 447.062 286.5278 447.0625 286.5313 447.0615 C286.5967 446.7192 286.6621 446.3765 286.7275 446.0298 c287.0703 444.2148 287.418 442.377 287.9297 440.6084 C283.6382 439.0234 280.9771 436.9092 280.2427 434.5454 C278.2617 438.4531 270.0786 441.2212 259.6416 441.2598 C260.3345 443.4766 261.1992 445.8525 262.2676 448.228 Cf278.2251 465.0068 m284.7109 458.4521 292.8823 461.6733 292.9663 461.7061 c293.0596 461.7441 293.1313 461.813 293.208 461.8755 C293.3472 461.0947 293.4048 460.2788 293.4521 459.4302 c293.4688 459.1387 293.4849 458.8477 293.5049 458.5581 c293.54 458.0498 293.5635 457.5356 293.5869 457.019 c293.6621 455.3677 293.7397 453.6606 294.1948 452.0029 c294.2344 451.8594 294.2783 451.7266 294.3213 451.5908 C291.334 454.4233 287.7402 457.0747 284.6118 457.2671 C281.144 460.0259 277.5913 461.438 274.043 461.438 c273.0645 461.438 272.2178 461.3213 271.4932 461.1675 C273.4707 462.814 275.6982 464.1519 278.2251 465.0068 Cf280.2974 465.7974 m282.5405 466.5381 287.1924 467.3447 290.895 463.168 C288.731 462.6729 284.2803 462.271 280.2974 465.7974 Cf362.9199 441.1968 m362.9297 441.1367 362.959 441.0869 362.9785 441.0317 C362.2793 440.377 361.4873 439.6133 360.7695 438.7798 C360.7305 440.9033 360.583 443.0293 360.4346 445.1343 c360.373 446.0107 360.3105 446.8867 360.2568 447.7617 c360.2334 448.1426 359.9951 448.4771 359.6426 448.6235 c359.291 448.7695 358.8857 448.7026 358.5977 448.4507 c356.0859 446.2388 354.6025 442.7251 353.2139 439.248 C353.2539 441.2891 353.1523 443.3433 352.917 444.7441 C353.1406 445.0664 353.3906 445.5244 353.748 446.1909 c355.0869 448.6841 357.7227 453.5947 362.0215 456.5981 C361.9385 453.5625 361.9316 447.3462 362.9199 441.1968 cf350.8516 444.8921 m351.4043 442.522 351.3418 435.9922 350.5791 433.8892 c350.5059 433.687 350.5195 433.4814 350.5723 433.2886 C350.5 433.1602 350.4336 433.0205 350.3594 432.896 c350.127 432.5054 349.8867 432.1172 349.6465 431.7275 c348.9365 430.5791 348.2178 429.3975 347.6436 428.1216 C346.96 430.4033 345.6328 432.5234 344.3789 433.9199 c344.2021 434.1172 344.0205 434.3013 343.8428 434.4941 C343.8291 434.7095 343.7617 434.9233 343.6074 435.0972 c342.1221 436.7651 342.4512 442.667 343.2471 446.1084 c343.6738 447.9517 344.4834 449.75 345.3398 451.6543 c345.9492 453.0068 346.5693 454.3843 347.0488 455.7974 C347.417 454.7915 347.8047 453.7939 348.1865 452.8125 c349.1895 450.2349 350.2256 447.5693 350.8516 444.8921 cf335.75 424.5151 m335.6143 424.5288 335.4746 424.5244 335.3398 424.48 c332.7881 423.6411 330.834 422.2407 329.332 420.6357 C328.9219 421.2959 328.6963 421.9624 328.6963 422.6279 c328.6963 424.9443 331.3125 427.3188 335.7461 429.0732 C336.1357 428.1099 336.5762 427.1714 337.0918 426.2915 c337.2764 425.9766 337.5127 425.5908 337.7842 425.1719 C337.75 425.1631 337.7197 425.1543 337.6855 425.1455 c337.0625 424.9858 336.3809 424.8066 335.75 424.5151 Cf308.2197 425.1406 m307.9268 425.627 307.627 426.0576 307.3604 426.4072 c305.5273 428.8203 303.7568 429.6396 300.8457 429.4194 c298.3135 429.2319 297.1055 428.082 295.7065 426.75 c295.5063 426.5601 295.2974 426.3608 295.0327 426.1157 c294.9829 426.0693 294.9395 426.0322 294.8911 425.9883 C293.1338 426.3076 292.2329 426.5728 290.6914 427.0776 c290.6216 427.1006 290.5522 427.0952 290.4819 427.1021 C290.4771 427.1157 290.4717 427.1279 290.4668 427.1416 c289.9316 428.5596 289.1738 430.5635 286.9497 430.748 C286.8247 431.7754 287.6533 432.2568 289.6602 432.9863 c290.3198 433.2256 290.9424 433.4521 291.437 433.7593 c291.4668 433.7778 291.4834 433.8076 291.5107 433.8281 C291.8887 433.4214 292.293 433.0283 292.7417 432.6577 c294.0493 431.5781 295.4873 431.0308 297.0171 431.0308 c298.4795 431.0308 299.9023 431.5381 301.2314 432.2632 C301.2979 432.1143 301.3877 431.9746 301.5273 431.8691 c303.7734 430.1641 307.7793 428.96 310.8389 428.96 c311.3564 428.96 311.8477 428.9946 312.2988 429.0669 c314.9756 429.4971 317.207 430.5059 319.1807 431.7891 C319.2666 431.7021 319.3672 431.626 319.4854 431.5737 c319.9424 431.3716 320.4521 431.2095 320.9453 431.0527 c322.877 430.4385 323.7178 430.042 323.6621 428.8228 c323.6533 428.6323 323.7129 428.4619 323.7988 428.3062 C320.2256 426.6836 314.8984 425.4287 308.2197 425.1406 Cf283.9863 430.0571 m283.9648 430.0776 283.9541 430.1045 283.9307 430.1235 c282.668 431.1343 282.0273 432.167 282.0273 433.1934 c282.0273 435.1343 284.4668 437.1855 288.562 438.71 C289.0073 437.5464 289.5586 436.4321 290.2627 435.394 C289.9399 435.2192 289.4751 435.0469 288.9771 434.8657 c287.23 434.231 284.6064 433.272 284.9658 430.4893 C284.6489 430.3896 284.3198 430.2417 283.9863 430.0571 Cf327.3193 442.8799 m326.2939 441.3452 324.7754 439.1943 322.8447 437.3677 c319.8936 434.5757 316.623 431.7876 311.9805 431.0415 c309.4775 430.6416 305.1807 431.7461 302.9375 433.3311 C303.2539 433.5522 303.5625 433.7788 303.8623 434.0068 C304.0361 434.0483 304.2041 434.1196 304.3398 434.2554 c307.3057 437.2207 314.3721 439.6152 315.1689 439.8789 c319.04 441.1606 323.4014 442.5161 327.3193 442.8799 Cf333.3516 440.0093 m333.5664 437.4595 334.0381 434.1475 335.0635 430.9517 C332.7607 430.0488 330.9053 428.9976 329.5303 427.8354 C330.3779 431.2173 L330.6797 431.855 330.8428 432.5146 330.8428 433.1929 c330.8438 434.6436 330.124 436.7534 326.8184 438.7793 C327.3721 439.4751 327.8652 440.1484 328.2998 440.771 C333.3516 440.0093 Lf325.6523 429.2607 m325.4658 431.7129 323.1318 432.4565 321.5518 432.9585 c321.3711 433.0156 321.2012 433.0718 321.0313 433.1279 C322.1553 434.0132 323.21 434.96 324.2197 435.9146 c324.6719 436.3423 325.0928 436.7852 325.499 437.231 C327.6074 435.998 328.7861 434.6074 328.833 433.2778 C328.4883 431.9033 L328.0088 431.0068 327.0488 430.1035 325.6523 429.2607 Cf327.5068 419.7646 m327.6533 419.5127 327.8223 419.2637 328.0088 419.0186 C327.5752 418.4131 327.1943 417.7979 326.8604 417.1855 C327.5068 419.7646 Lf338.8184 427.3022 m337.0732 430.2813 335.8525 434.7617 335.3867 439.7031 C335.6387 439.665 L335.6533 439.6533 335.668 439.6401 335.6816 439.6284 c335.8623 439.4722 336.0322 439.3262 336.1787 439.1895 C336.4922 438.8989 L338.7412 436.8115 340.8662 434.8403 342.8906 432.584 c344.8887 430.3579 347.3428 425.6636 345.418 422.542 c344.9023 421.7041 344.4648 421.7041 344.3008 421.7041 c342.8545 421.7041 340.4482 424.5205 338.8184 427.3022 cf339.1748 439.1333 m340.6045 438.918 L340.624 438.499 340.6563 438.0864 340.7041 437.6831 C340.2002 438.167 339.6904 438.6514 339.1748 439.1333 Cf340.5967 440.9414 m337.1826 441.4556 L336.5176 441.5557 L335.9395 442.0757 335.3408 442.686 335.1836 443.2554 C335.1787 443.4668 335.1768 443.6768 335.1758 443.8843 c335.1758 443.9082 335.1641 443.9282 335.1631 443.9517 C337.6758 443.5923 339.7891 443.29 340.7549 443.1519 C340.6797 442.4507 340.625 441.7031 340.5967 440.9414 Cf333.1875 443.0244 m333.1943 442.7393 333.2061 442.4058 333.2217 442.0518 C329.5381 442.6069 L329.7422 442.9165 329.9229 443.1895 330.0684 443.3931 c330.2861 443.6978 330.3154 444.0986 330.1436 444.4316 c330.0898 444.5356 330.0156 444.6226 329.9326 444.6997 C331.042 444.541 332.166 444.3804 333.2559 444.2246 C333.2354 444.1699 333.2031 444.1216 333.1924 444.0625 c333.1289 443.7207 333.127 443.3716 333.1875 443.0244 Cf320.3838 443.5635 m320.6436 444.1758 320.7656 444.7393 320.9033 445.4019 c320.9404 445.5786 320.9805 445.772 321.0254 445.9736 C322.0078 445.8335 324.9414 445.4136 328.2939 444.9341 C325.7559 444.8198 323.0537 444.2832 320.3838 443.5635 Cf319.9482 455.061 m319.9502 454.2061 L319.9531 451.8267 319.624 448.8701 319.0908 446.4902 c319.0352 446.2446 318.9893 446.019 318.9453 445.8081 c318.7188 444.7192 318.6055 444.1724 317.7705 443.0796 c317.6953 442.9819 317.6494 442.873 317.6152 442.7622 C316.5684 442.4395 315.5361 442.1074 314.54 441.7773 c313.9023 441.5664 312.0449 440.9258 309.9199 439.9819 C311.7432 442.4917 313.1084 445.3203 314.457 448.6602 c314.749 449.3848 314.9824 450.251 315.2295 451.1685 c315.7217 452.9927 316.2793 455.0601 317.3164 455.9131 c317.7188 456.2437 317.7998 456.8271 317.5039 457.2549 c317.207 457.6826 316.6328 457.812 316.1816 457.5518 c315.96 457.4238 315.7129 457.3125 315.4551 457.2061 C315.9932 457.9033 316.707 458.6401 317.2344 459.1797 c317.7686 459.7266 318.2305 460.1992 318.5557 460.6221 C318.6914 460.7983 L319.3428 461.6494 319.8584 462.2578 320.2646 462.6919 C319.9316 460.1616 319.9395 457.5781 319.9482 455.061 Cf314.2207 454.668 m313.8438 453.7085 313.5625 452.6685 313.2988 451.689 c313.0674 450.8315 312.8486 450.021 312.6016 449.4082 c310.4355 444.041 308.3906 440.2842 304.3525 436.9614 c302.335 435.3027 299.5732 433.0308 297.0171 433.0308 c295.9497 433.0308 294.9678 433.4131 294.0151 434.1997 c290.437 437.1548 289.5898 441.6455 288.6929 446.4004 c288.1558 449.2485 287.604 452.1733 286.4126 454.7915 C288.8081 453.8179 291.8594 451.4346 295.1162 447.9512 c296.4751 446.4971 297.1821 444.7432 297.9312 442.8862 c298.1367 442.376 298.3447 441.8599 298.5688 441.3413 c298.7866 440.8369 299.0566 440.189 299.2861 439.5132 C298.6812 437.04 299.0078 435.4277 300.2588 434.7192 c300.543 434.5581 300.8896 434.5464 301.1816 434.6865 c301.4766 434.8267 301.6836 435.1016 301.7383 435.4233 c301.9463 436.6582 301.8252 438.0146 301.3682 439.562 C302.3896 443.1318 305.0068 447.6689 305.5879 448.4575 c307.3311 450.8271 309.9824 452.6401 311.8994 453.7446 c312.5791 454.1357 313.4053 454.4102 314.2207 454.668 Cf266.5977 454.0874 m270.1226 454.0874 272.4839 450.6924 273.2998 444.4961 C273.2788 444.4961 273.2573 444.4961 273.2354 444.4961 c270.4097 444.4961 265.7241 445.7485 265.457 453.9688 C265.7593 454.0317 266.1519 454.0874 266.5977 454.0874 cf272.4946 452.9146 m285.6367 451.0352 L285.8081 450.4199 285.96 449.7891 286.1021 449.1479 C273.5908 451.0332 L273.252 451.7559 272.8838 452.3784 272.4946 452.9146 Cf284.0825 454.9551 m284.4028 454.3789 284.6816 453.7778 284.9268 453.1563 C279.3945 453.9478 L281.4868 454.0415 283.166 454.5811 284.0825 454.9551 Cf278.8003 455.9204 m275.9551 455.9204 273.3984 456.9673 271.1821 459.0356 C271.8843 459.2432 272.8579 459.438 274.043 459.438 c276.7974 459.438 279.5923 458.4399 282.3701 456.4673 C281.4644 456.1899 280.2197 455.9204 278.8003 455.9204 cf303.9775 449.6431 m303.4092 448.8726 301.5449 445.6655 300.2646 442.4644 C300.0996 442.8569 299.9424 443.2476 299.7861 443.6338 c299.0596 445.4351 298.3018 447.29 296.9141 448.9263 C297.0029 449.105 297.0557 449.3037 297.0229 449.5161 c296.9106 450.2451 296.6924 450.8545 296.4814 451.4438 c296.3584 451.7876 296.2314 452.1406 296.1235 452.5327 c295.7275 453.9746 295.6548 455.5684 295.585 457.1099 c295.5605 457.6421 295.5361 458.1724 295.5 458.6958 c295.4805 458.9766 295.4648 459.2588 295.4492 459.541 c295.3623 461.1074 295.272 462.7271 294.5757 464.29 c294.4814 464.5005 294.377 464.7759 294.2607 465.0791 c294.1523 465.3623 294.0464 465.6338 293.9404 465.8921 C294.6094 465.603 295.2778 465.2446 295.8149 464.9565 C296.3755 464.6582 L298.98 463.2998 301.2715 461.252 302.8271 458.8926 c304.3086 456.645 304.3047 454.9404 304.2998 452.5815 c304.2988 452.0542 304.2969 451.5063 304.3125 450.9272 c304.3184 450.7031 304.4111 450.5078 304.54 450.3447 C304.3477 450.1143 304.1553 449.8848 303.9775 449.6431 cf268.8193 458.6006 m270.5215 456.7212 272.478 455.3809 274.6099 454.6318 C270.7759 455.1802 L270.5752 455.209 270.3882 455.1592 270.2173 455.0786 C268.9946 455.8247 267.769 456.0581 266.7705 456.0811 C267.4126 456.9565 268.0942 457.7998 268.8193 458.6006 Cf277.9307 428.3398 m277.5562 426.2124 L277.5405 426.1235 277.5552 426.0391 277.5625 425.9531 C276.6938 426.166 275.7798 426.292 274.8398 426.292 c274.4507 426.292 274.0654 426.2656 273.6826 426.228 C275.373 426.8291 276.8076 427.5391 277.9307 428.3398 Cf279.5259 425.8657 m280.4702 431.2329 L280.8496 430.4004 281.48 429.604 282.3511 428.8477 C281.4458 427.98 280.6875 426.8789 280.377 425.7148 c280.3003 425.4277 280.2607 425.146 280.2388 424.8672 C279.9316 425.0537 279.6143 425.2305 279.2759 425.3818 C279.396 425.5166 279.4922 425.6748 279.5259 425.8657 Cf327.543 428.1304 m324.1348 414.5352 L322.0264 418.5449 319.1309 422.2075 315.2383 423.8286 C320.5273 424.6758 324.8066 426.1982 327.543 428.1304 Cf333.5781 408.4141 m333.207 408.4551 332.9004 408.4863 332.6064 408.5117 C333.0967 410.877 333.582 412.9453 334.0381 414.7422 C335.4893 414.1045 337.1113 413.5439 338.8887 413.0684 C336.8564 411.6025 335.0986 410.0313 333.5781 408.4141 Cf340.9648 414.4648 m340.8447 414.5732 340.7061 414.6641 340.5371 414.7041 c338.2783 415.2402 336.2764 415.915 334.5527 416.7002 C335.374 419.7188 336.04 421.6797 336.3643 422.5771 C336.8584 422.8599 337.5254 423.0396 338.1826 423.2085 c338.4297 423.272 338.6709 423.334 338.8984 423.3999 c338.9365 423.4106 338.9629 423.4375 338.998 423.4521 C340.4443 421.5796 342.3721 419.7041 344.3008 419.7041 c344.8057 419.7041 345.4512 419.8379 346.0898 420.3232 C346.1289 419.4639 346.2852 418.6836 346.6357 418.126 c346.7627 417.9238 346.8975 417.7559 347.0352 417.6016 C344.8027 416.667 342.7891 415.6084 340.9648 414.4648 Cf349.2363 418.584 m348.9912 418.584 348.667 418.6523 348.3291 419.1904 c347.7422 420.1245 348.2783 423.7544 348.9063 425.8433 c349.4199 427.5586 350.3564 429.0728 351.3477 430.6763 c351.5938 431.0747 351.8398 431.4722 352.0771 431.8716 c353.1357 433.6455 354 435.8184 354.8359 437.9194 c355.8809 440.5459 356.9531 443.2407 358.4199 445.2686 C358.4268 445.1768 358.4326 445.0854 358.4395 444.9937 c358.6797 441.584 358.9092 438.2661 358.7061 435.0576 C358.6553 434.7939 358.6221 434.5288 358.623 434.2627 c358.623 434.2349 358.6348 434.21 358.6367 434.1821 C358.3545 431.0425 357.6143 428.0098 355.9941 425.106 c354.9365 423.2129 351.2598 418.584 349.2363 418.584 cf369.249 446.019 m369.0225 446.0327 368.791 445.9824 368.5938 445.8369 c367.4434 444.9819 366.1094 443.9404 364.7246 442.668 C363.6299 450.4829 364.0908 458.2891 364.0957 458.3711 c364.1182 458.7329 363.9434 459.0786 363.6377 459.2744 c363.333 459.4702 362.9453 459.4868 362.626 459.3145 c357.1172 456.3652 353.8633 450.6182 352.2041 447.5415 C351.584 449.5874 350.8086 451.5869 350.0508 453.5371 c349.2539 455.5874 348.4297 457.707 347.833 459.7852 c347.7012 460.248 347.2529 460.5547 346.7793 460.5054 c346.3008 460.4609 345.9219 460.082 345.877 459.6035 c345.6514 457.2183 344.6143 454.9146 343.5166 452.4751 c342.6572 450.5669 341.7695 448.5938 341.2979 446.5591 c341.2129 446.1919 341.1172 445.6987 341.0234 445.1333 C331.2764 446.5278 L325.3037 447.3828 322.6426 447.7637 321.3955 447.8828 C321.7461 449.9824 321.9521 452.2744 321.9502 454.2085 C321.9482 455.0674 L321.9375 458.3818 321.9268 461.5127 322.6211 464.5308 c322.6875 464.8208 322.6221 465.126 322.4404 465.3628 c322.2598 465.5991 321.9824 465.7427 321.6846 465.7539 c320.3301 465.8345 318.8516 464.2988 317.1035 462.0142 C316.9707 461.8423 L316.7168 461.5122 316.2734 461.0581 315.8037 460.5771 c314.5127 459.2554 313.0791 457.7813 312.7695 456.293 C312.1309 456.0718 311.4971 455.8208 310.9014 455.4775 c309.5488 454.6987 307.8574 453.583 306.3027 452.1748 C306.3027 452.3057 306.2998 452.4492 306.2998 452.5771 c306.3057 455.0806 306.3105 457.2432 304.4971 459.9932 c302.7568 462.6323 300.2012 464.9185 297.3003 466.4316 C296.7603 466.7188 L295.3667 467.4668 293.4482 468.5 291.8281 468.4043 c291.4058 468.3823 291.0513 468.0913 290.9307 467.686 c290.8096 467.2813 290.9644 466.8379 291.3052 466.5879 c291.5962 466.374 292.0479 465.2563 292.3047 464.5923 C286.6821 470.8188 279.0864 467.5249 278.1523 467.085 C276.5264 466.5845 275.0205 465.9023 273.6099 465.0942 C274.3281 467.8408 274.6909 472.2197 271.3525 475.6807 C369.249 462.4219 L369.249 446.019 Lf271.395 464.6011 m269.4453 466.4775 268.4326 468.3926 268.3809 470.3066 c268.3311 472.1396 269.1924 473.6045 269.8047 474.4082 C273.1084 471.1021 272.1431 466.7065 271.395 464.6011 Cf263.6738 456.1802 m260.9131 457.584 259.2773 459.3335 258.8057 461.3906 c258.1929 464.0649 259.6709 466.7129 260.5308 467.9673 C264.2876 464.6929 264.0054 458.752 263.6738 456.1802 Cf259.5205 456.604 m260.1709 456.0098 260.9321 455.4561 261.8022 454.9434 C258.5347 453.1968 L258.8247 454.3457 259.1519 455.4858 259.5205 456.604 Cf257.9438 450.6133 m262.333 452.9595 L261.7173 451.8564 261.1533 450.7363 260.6333 449.6128 C257.4375 447.8604 L257.5869 448.7715 257.7539 449.6909 257.9438 450.6133 Cf259.3525 446.6289 m258.6162 444.7695 257.9985 442.9463 257.4839 441.2275 C257.1963 441.2178 256.9126 441.2036 256.6284 441.1895 C256.7378 442.522 256.8823 443.9277 257.0723 445.3784 C259.3525 446.6289 Lf254.5918 441.0537 m251.6016 440.79 248.855 440.2813 246.4893 439.5752 C254.8936 444.1836 L254.7705 443.1045 254.6709 442.0566 254.5918 441.0537 Cf239.7539 429.2949 m240.3086 428.7461 240.999 428.2305 241.8232 427.75 C240.4272 427.5054 239.1172 427.0938 237.8955 426.5156 C239.7539 429.2949 Lf245.8369 428.0146 m245.7378 428.1152 245.6201 428.1997 245.479 428.252 c244.5977 428.5781 243.813 428.9312 243.1313 429.3037 C243.1313 429.3291 243.1396 429.355 243.1377 429.3804 C243.5718 429.7856 244.5015 430.333 244.8521 430.5396 c245.0664 430.6655 245.2524 430.7759 245.3887 430.8643 c246.5547 431.6216 247.9814 432.1147 249.7505 432.3726 c251.1733 432.5806 252.7017 432.3506 254.312 432.085 C254.3286 431.25 254.353 430.731 254.3584 430.6255 c254.3838 430.1289 254.772 429.75 255.2505 429.6973 C255.4033 429.4346 255.6592 429.2363 255.9839 429.1982 c256.0234 429.1934 256.0625 429.1914 256.1016 429.1914 c256.6016 429.1914 257.0337 429.5664 257.0933 430.0752 c257.0977 430.1152 257.1714 430.6963 257.333 431.6611 C258.5391 431.5542 259.7495 431.5654 260.9409 431.8696 c264.5703 432.7959 267.7524 433.0908 271.4883 431.5215 c272.8154 430.9648 273.8711 430.2432 274.9893 429.479 c275.1392 429.3765 275.2993 429.272 275.4517 429.1685 C272.1113 427.4316 266.4258 426.1152 259.4243 426.1152 c256.4087 426.1157 253.436 426.3833 250.752 426.8711 C250.6323 427.1748 250.3823 427.4209 250.0396 427.4922 c248.5776 427.7944 247.1782 427.9639 245.8369 428.0146 Cf250.4688 424.8911 m253.251 424.3911 256.3179 424.1157 259.4243 424.1152 c263.2573 424.1152 266.7896 424.4849 269.8325 425.1416 C269.3574 424.9014 268.9126 424.6265 268.5083 424.3184 c266.9771 423.1528 266.4033 421.5737 265.897 420.1807 c265.1904 418.2363 264.7314 417.209 262.7969 416.9238 c262.2651 416.8457 261.6558 416.8115 260.8218 416.8115 c260.4258 416.8115 260.0234 416.8184 259.6191 416.8262 c256.6689 416.8809 253.5713 416.8545 251.6533 414.4844 C251.2578 416.124 249.9614 417.6475 247.8325 418.9629 C249.2764 421.291 250.0718 423.5039 250.4688 424.8911 Cf250.5161 408.7207 m250.6338 408.5029 250.7666 408.2998 250.9224 408.1172 C250.5967 407.6641 250.3223 407.2031 250.1406 406.7305 C250.5161 408.7207 Lf252.5068 406.9063 m253.0645 406.6094 253.6689 406.3594 254.2661 406.1143 c254.8267 405.8838 255.3916 405.6465 255.9004 405.3779 C255.8301 405.334 255.7617 405.291 255.687 405.2461 c255.1729 404.9375 254.5327 404.5527 254.1309 403.8887 c253.8018 403.3428 253.6133 402.6416 253.5396 401.7959 C252.4097 402.8047 251.7983 403.8701 251.7983 404.9229 c251.7983 405.5811 252.0459 406.2471 252.5068 406.9063 Cf274.5122 398.2988 m276.0884 398.4326 276.9316 398.1338 278.5776 397.2432 c279.1831 396.916 279.772 396.6152 280.3936 396.4219 C278.8325 396.3193 277.2139 396.2598 275.5371 396.2598 c273.9897 396.2598 272.4644 396.3369 270.959 396.4492 C271.8716 397.4199 272.7686 398.1484 274.5122 398.2988 cf287.5098 404.9258 m288.4673 405.0488 289.3135 405.5801 290.271 406.6465 c290.6191 407.0342 290.8398 407.3857 291.0171 407.6689 c291.3584 408.2119 291.3794 408.2441 292.1592 408.2012 c293.6177 408.1182 293.9346 407.3037 294.459 405.6162 c294.8706 404.293 295.3369 402.792 296.8647 402.0391 c297.1533 401.8965 297.4497 401.791 297.748 401.7051 C295.5278 399.2725 290.2788 397.4668 283.3979 396.6875 C286.5537 398.3213 287.5737 402.041 287.5098 404.9258 Cf300.1045 401.5352 m300.1211 401.5625 300.1406 401.5898 300.1563 401.6172 C300.6396 401.7207 301.1133 401.8906 301.5615 402.1416 C301.1289 401.8037 300.7236 401.458 300.3584 401.1025 C300.3154 401.2695 300.2217 401.4121 300.1045 401.5352 Cf301.5068 393.751 m300.9775 393.2275 300.7285 392.6348 300.6094 392.042 C300.334 392.4346 300.1074 392.834 299.9336 393.2402 C299.6689 394.6797 L299.6436 394.8164 299.5908 394.9414 299.5186 395.0518 C299.5166 395.1025 299.5088 395.1533 299.5088 395.2051 c299.5088 398.4395 303.0625 401.666 309.0225 403.876 C310.2725 402.0449 311.5732 399.9766 312.7764 397.7705 C312.6787 397.7842 312.5801 397.7979 312.4785 397.7813 c312.0215 397.7031 311.4844 397.7119 310.9082 397.7246 c310.2012 397.7383 309.4658 397.7529 308.7393 397.6064 c307.2266 397.3066 306.4746 396.4766 305.748 395.6748 c305.5938 395.5049 305.4355 395.3301 305.2637 395.1543 c305 394.8857 304.6309 394.8281 304.001 394.749 c303.2441 394.6553 302.3027 394.5371 301.5068 393.751 cf316.624 420.7715 m324.4141 415.1689 327.0996 399.3193 327.1279 399.1445 c327.1348 399.1045 327.1592 399.0732 327.1699 399.0352 C324.9287 394.3389 324.2129 390.3594 324.0068 388.8271 C323.9697 388.8135 323.9385 388.8115 323.9014 388.7969 c323.1211 388.4893 322.6787 387.8994 322.3564 387.4688 c322.2783 387.3643 322.2139 387.2793 322.1592 387.21 C322.5996 401.4219 318.5068 415.2334 316.624 420.7715 Cf350.4521 416.8164 m351.4355 417.1592 352.4336 417.8584 353.3682 418.708 C353.8418 418.2598 354.4219 417.9609 355.0996 417.8555 c355.2988 417.8242 355.5029 417.8096 355.709 417.8096 c358.6504 417.8096 362.1396 420.7651 362.5527 421.1245 c363.1221 421.6201 363.6455 422.1074 364.1348 422.5938 C364.7764 422.2368 365.5381 422.2251 366.2139 422.2197 c366.5244 422.2173 366.8184 422.2148 367.0234 422.1777 c367.6064 422.0732 368.1494 421.918 368.8369 421.6577 c368.9531 421.6138 369.0723 421.5928 369.1904 421.5928 c369.21 421.5928 369.2285 421.6006 369.248 421.6016 C369.248 415.5938 L369.1494 415.5928 369.0498 415.5918 368.9502 415.5586 c364.5264 414.1123 358.9375 413.3154 353.2148 413.3154 c351.1641 413.3154 349.1387 413.416 347.1709 413.6123 C348.915 415.416 350.1621 416.5557 350.4521 416.8164 Cf369.249 423.6279 m368.583 423.8647 367.9844 424.0376 367.377 424.1465 c367.0049 424.2134 366.6104 424.2163 366.2295 424.2197 c366.0518 424.2212 365.8457 424.2241 365.6533 424.2354 C366.5449 425.2959 367.2871 426.3804 367.9326 427.5508 C368.3535 428.2979 L368.6572 428.833 368.959 429.3711 369.249 429.9014 C369.249 423.6279 Lf268.5664 476.0581 m267.7847 475.1553 266.3408 473.1069 266.3823 470.3462 C266.0996 470.3979 265.8003 470.3418 265.563 470.1436 c264.7739 469.4858 264.0288 468.7163 263.3164 467.8911 C262.6738 468.7466 261.8838 469.5332 260.9038 470.2017 c260.4858 470.4868 259.9214 470.4141 259.5879 470.0342 c259.543 469.9829 259.2075 469.5894 258.7822 468.9551 C256.4834 471.0786 253.064 472.0552 248.5649 471.8398 c248.0322 471.8135 247.6138 471.374 247.6138 470.8408 c247.6138 467.6274 249.5029 461.5234 256.6528 461.4238 c256.6577 461.4238 256.6626 461.4238 256.6675 461.4238 c256.7041 461.4238 256.7358 461.4409 256.7715 461.4448 C256.7979 461.2822 256.8164 461.1201 256.8535 460.9565 c257.0659 460.0229 257.4673 459.1538 258.0156 458.3364 C258.0049 458.3125 257.9854 458.2964 257.9766 458.2715 c257.3057 456.3916 256.7559 454.4502 256.3042 452.5078 C255.2314 454.8789 253.2568 457.8022 249.7949 458.8955 c249.2695 459.0615 248.7065 458.77 248.54 458.2432 c248.3735 457.7163 248.666 457.1548 249.1924 456.9883 c249.5137 456.8867 249.8179 456.7617 250.1094 456.6201 C246.9189 455.979 240.9272 453.8242 240 446.6362 c239.9614 446.3384 240.0591 446.0386 240.2656 445.8208 c240.4551 445.6206 240.7183 445.5083 240.9917 445.5083 c241.0161 445.5083 241.041 445.5093 241.0654 445.5112 c241.4023 445.5361 249.0562 446.2241 252.665 454.5815 C253.605 453.4761 254.2612 452.2183 254.7002 451.147 C236.2925 441.3076 L236.293 480.4292 L268.5664 476.0581 Lf250.5381 454.6919 m248.1875 449.8813 244.2925 448.2769 242.25 447.752 C243.5645 452.7183 248.0747 454.2324 250.5381 454.6919 Cf255.3506 449.2275 m255.4287 448.9331 255.4692 448.7437 255.4712 448.7329 c255.4805 448.686 255.5059 448.6475 255.521 448.6035 C255.4082 447.9434 255.3037 447.2871 255.21 446.6387 C231.2847 433.5181 L230.9717 434.1909 230.5771 434.9512 230.1089 435.7354 C255.3506 449.2275 Lf233.1362 431.1592 m235.0127 432.9067 237.4497 433.811 240.3984 433.8579 C233.3569 423.3257 L233.3047 423.248 233.2822 423.1611 233.2544 423.0762 C231.4229 421.0605 230.2192 418.7188 229.4355 416.6445 C229.2256 417.1855 228.9531 417.8369 228.5967 418.582 C228.6323 418.6885 228.6602 418.7988 228.6582 418.917 c228.6567 418.9961 228.5723 426.9092 233.1362 431.1592 cf237.1162 423.8022 m240.1587 425.8447 244.0244 426.4893 248.6191 425.7231 C248.0146 423.5347 246.0874 418.1191 241.168 414.6885 c241.1406 414.6699 241.127 414.6406 241.1025 414.6201 C239.4102 415.1084 237.8086 415.3623 236.3184 415.3623 c233.9351 415.3623 232.0718 414.7363 230.6348 413.876 C231.4424 416.8105 233.2417 421.2002 237.1162 423.8022 cf226.8472 407.7598 m228.8325 406.6768 230.8247 406.0088 232.792 405.7568 C231.3228 405.6348 229.7827 405.5693 228.1812 405.5693 c219.6704 405.5693 212.9014 407.415 209.333 409.7432 C209.3794 409.8848 209.4028 410.0352 209.3799 410.1924 c209.1758 411.5889 211.5537 412.8008 212.7134 413.3887 C216.2197 411.2256 220.896 409.9697 226.6865 409.6367 C226.4844 409.2402 226.3882 408.9854 226.3838 408.9727 c226.2192 408.5088 226.416 407.9951 226.8472 407.7598 cf207.4976 411.2734 m207.1353 411.6934 206.8877 412.1191 206.7363 412.5439 C206.5698 413.46 L206.6006 414.8096 207.7212 415.9531 208.793 416.7402 C209.415 416 210.1104 415.3135 210.8818 414.6855 C209.5791 413.9658 207.9585 412.8564 207.4976 411.2734 Cf204.5635 413.4043 m204.5635 412.9111 204.6499 412.4287 204.8101 411.957 C205.8247 406.376 L191.7495 409.5576 L207.1675 418.0117 L205.4614 416.624 204.5635 415.0469 204.5635 413.4043 cf207.9443 405.8965 m207.4487 408.625 L211.4238 405.5879 219.1313 403.5693 228.1812 403.5693 c236.8486 403.5693 244.2861 405.4199 248.3916 408.2451 C246.3115 397.2236 L207.9443 405.8965 Lf249.7988 404.9189 m249.7988 404.8975 249.8018 404.877 249.8022 404.8555 c249.8022 404.7441 249.8096 404.6123 249.8247 404.4619 c249.8296 404.4102 249.834 404.3594 249.8403 404.3086 c250.0615 402.458 251.1392 398.3652 251.7925 395.9854 C248.2632 396.7832 L249.7988 404.9189 Lf254.0068 395.4844 m253.6079 396.9092 253.2109 398.3955 252.8647 399.7598 C254.0586 398.8398 255.5869 397.998 257.4233 397.2598 c257.5073 397.2266 257.5933 397.2207 257.6792 397.21 C257.9814 395.9268 258.7075 394.9346 259.646 394.21 C254.0068 395.4844 Lf267.791 393.5654 m268.3188 393.8711 268.7646 394.2227 269.168 394.5859 C271.2378 394.374 273.376 394.2598 275.5371 394.2598 c285.8955 394.2598 294.0674 396.1494 298.1128 399.3291 C295.8447 386.1855 L295.8354 386.1309 295.8496 386.0801 295.8491 386.0264 C265.7212 392.8369 L266.4756 392.9746 267.1807 393.2109 267.791 393.5654 cf297.8154 385.8457 m298.5151 389.9014 L299.376 385.2295 L297.7266 385.6016 L297.7627 385.6797 297.8003 385.7568 297.8154 385.8457 Cf301.498 384.749 m300.7227 388.9609 L305.5537 384.5898 315.3711 381.6582 326.957 381.6582 c331.6211 381.6582 336.1953 382.1709 340.3008 383.1104 C332.5791 377.7236 L301.498 384.749 Lf345.1875 386.5195 m345.041 386.5352 344.8916 386.5273 344.7451 386.4736 c339.7686 384.6582 333.4512 383.6582 326.957 383.6582 c316.4473 383.6582 307.0967 386.2979 302.5078 390.0537 C302.5078 390.0625 302.5127 390.0703 302.5127 390.0801 C302.5098 390.457 L302.498 391.3857 302.5107 391.9307 302.9131 392.3281 c303.2109 392.623 303.5947 392.6836 304.248 392.7646 c304.9961 392.8584 305.9277 392.9736 306.6914 393.7539 c306.8828 393.9482 307.0586 394.1426 307.2305 394.332 c307.8535 395.0195 308.2646 395.4736 309.1299 395.6455 c309.6445 395.749 310.2432 395.7344 310.8711 395.7256 c311.5068 395.7129 312.167 395.7002 312.8105 395.8086 c313.1387 395.8643 313.3857 396.0811 313.5234 396.3564 C315.0039 393.459 316.2666 390.3701 316.9893 387.293 C316.6465 386.874 316.5557 386.3467 316.7773 385.8799 c317.0137 385.3809 317.6104 385.1689 318.1094 385.4053 c318.3994 385.543 318.5928 385.8027 318.6572 386.0938 C319.1064 386.2969 320.0098 386.3525 320.2031 386.1104 C320.1787 385.6523 320.4707 385.2354 320.9102 385.1016 c322.6748 384.5596 323.4795 385.6299 323.957 386.2695 c324.2207 386.6211 324.3936 386.8408 324.6328 386.9355 c324.8271 387.0117 324.9121 387.0088 324.9121 387.0127 C324.9951 386.9639 325.1689 386.7041 325.2852 386.5322 c325.5615 386.1221 325.9063 385.6104 326.498 385.2393 c327.1328 384.8418 327.752 384.6924 328.3389 384.6924 c329.4043 384.6924 330.3691 385.1836 331.1475 385.5801 c332.2881 386.1611 332.9707 386.4697 333.6934 386.0391 c333.9434 385.8916 334.2275 385.8701 334.4844 385.9453 C334.4854 385.9453 334.4854 385.9443 334.4863 385.9443 c334.585 385.9141 334.6846 385.8994 334.7832 385.8994 c335.21 385.8994 335.6045 386.1738 335.7383 386.6025 c335.7646 386.6865 337.0352 390.6689 339.6152 394.918 C339.9082 394.9258 340.2148 394.9395 340.542 394.958 c341.6279 395.0205 342.9746 395.0957 343.6943 394.7217 c343.9141 394.6074 344.1182 394.3545 344.3545 394.0625 c344.8018 393.5078 345.415 392.748 346.5801 392.4951 c347.043 392.3945 347.4268 392.3574 347.7344 392.3262 c348.3496 392.2656 348.6035 392.2412 349.1152 391.8232 c349.4941 391.5137 350.1563 390.9463 350.709 390.3721 C345.1875 386.5195 Lf352.3691 391.5303 m351.7021 392.2598 350.8447 392.9932 350.3809 393.3721 c349.4014 394.1719 348.6533 394.2461 347.9307 394.3174 c347.6641 394.3438 347.3662 394.3711 347.0049 394.4502 c346.5508 394.5488 346.3047 394.8301 345.9102 395.3184 c345.5811 395.7275 345.207 396.1904 344.6152 396.4971 c343.5645 397.041 342.2266 397.0459 340.9736 396.9844 C342.5986 399.2764 344.6094 401.4697 347.0156 403.001 C351.7158 400.8516 354.4072 398.0234 354.4072 395.2051 c354.4072 394.4941 354.2422 393.7793 353.917 393.082 c353.8379 392.9121 353.8271 392.7344 353.8457 392.5605 C352.3691 391.5303 Lf349.2031 404.1563 m350.498 404.6953 351.8887 405.0332 353.3779 405.1016 c353.8926 405.125 354.3057 405.5371 354.3311 406.0518 c354.3564 406.5664 353.9863 407.0156 353.4766 407.0898 c353.2383 407.125 349.3213 407.6572 344.1162 406.2549 C344.0986 406.2617 344.0869 406.2754 344.0693 406.2813 c343.2168 406.5566 342.3135 406.8047 341.3926 407.0391 C342.8174 408.8281 344.21 410.4307 345.4639 411.7988 C347.9678 411.4824 350.5703 411.3154 353.2148 411.3154 c359.0947 411.3154 364.626 412.0938 369.248 413.5615 C369.248 403.1162 L369.0742 403.1035 368.9004 403.0635 368.7461 402.9561 C356.3389 394.2998 L356.3799 394.6006 356.4072 394.9023 356.4072 395.2051 c356.4072 398.5791 353.8613 401.7139 349.2031 404.1563 Cf369.249 484.374 m369.249 481.957 L227.2061 500.0176 L230.9453 501.353 L369.2578 484.4849 L369.2568 484.4463 369.25 484.4126 369.249 484.374 Cf234.2925 503.2061 m234.2925 502.96 L230.9526 503.3672 L230.7983 503.3843 230.6426 503.3687 230.4951 503.3164 C223.0737 500.666 L223.0093 500.6431 222.9619 500.5986 222.9053 500.5645 C222.4946 500.6167 L221.9541 500.6826 221.4463 500.2993 221.3765 499.7505 c221.3716 499.7104 221.3853 499.6738 221.3848 499.6343 C221.374 499.5752 221.3496 499.521 221.3496 499.459 C221.3496 483.2905 L221.3496 482.7383 221.7974 482.2905 222.3496 482.2905 c222.3848 482.2905 222.415 482.3071 222.4492 482.3105 C222.4604 482.3086 222.4692 482.3013 222.4805 482.2998 C234.293 480.7002 L234.2925 440.3384 L234.2925 440.3066 234.3076 440.2793 234.3105 440.2485 C228.9956 437.4072 L227.418 439.5225 225.2578 441.4312 222.4717 441.7407 c222.064 441.7886 221.666 441.5757 221.4746 441.2095 c221.3599 440.9897 219.5718 437.4346 219.8936 432.543 C218.6226 431.8633 L218.6221 500.0356 L218.9053 509.7246 226.3838 511.7485 226.6987 511.8296 c226.7368 511.8389 226.7744 511.8506 226.811 511.8643 c228.0659 512.3398 229.8862 512.6807 231.4277 511.6157 c233.2749 510.3389 234.2925 507.3521 234.2925 503.2061 Cf221.4639 511.5542 m221.5249 511.5649 221.5845 511.5811 221.6426 511.603 c221.8867 511.6953 222.1392 511.7563 222.3906 511.8218 C219.7969 509.939 216.8081 506.415 216.6226 500.0649 C216.6226 430.7939 L215.0464 429.9517 L214.5225 430.0244 213.9912 430.0669 213.4526 430.0845 C213.4531 500.332 L213.4951 501.604 213.6646 502.7266 213.918 503.731 C214.0083 503.8843 214.0679 504.0518 214.0679 504.2314 C215.8965 510.4199 221.2012 511.5054 221.4639 511.5542 cf211.5435 501.4775 m209.9331 501.6865 L211.6445 502.4731 L211.5986 502.1548 211.5737 501.8135 211.5435 501.4775 Cf208.4722 485.7109 m208.271 499.8857 L211.4536 499.4722 L211.4536 485.3228 L208.4722 485.7109 Lf207.3999 427.106 m211.5718 428.5313 215.356 428.4204 218.6514 426.7725 c225.3696 423.4136 227.9966 414.7324 228.0225 414.6445 c228.1113 414.3428 228.3345 414.1289 228.6035 414.0176 C228.4331 413.3613 228.3071 412.7773 228.2212 412.3164 c228.1934 412.167 228.2065 412.0225 228.2422 411.8838 C228.1445 411.7744 228.043 411.6641 227.9531 411.5557 C227.9224 411.5596 227.896 411.5762 227.8643 411.5771 c219.4551 411.8838 213.5112 414.1016 210.1978 418.1689 c207.3345 421.6831 207.3003 425.6636 207.3999 427.106 Cf206.7129 420.0264 m206.689 420.0156 206.6636 420.0166 206.6406 420.0039 C188.4722 410.041 L188.1079 409.8408 187.9048 409.4365 187.9629 409.0244 c188.0205 408.6133 188.3271 408.2803 188.7324 408.1885 C332.5684 375.6758 L332.6416 375.6592 332.7158 375.6514 332.7891 375.6514 c332.9922 375.6514 333.1924 375.7129 333.3613 375.8311 C369.248 400.8672 L369.248 397.0938 L333.4609 371.7178 L177.4653 407.5967 L205.7822 422.7314 L205.9858 421.874 206.2861 420.9604 206.7129 420.0264 Cf175.7979 405.9287 m332.6729 369.8467 L332.6729 327.9336 L180.3247 367.1992 L175.7979 405.9287 Lf334.6729 370.126 m369.248 394.6426 L369.248 353.9424 L334.6729 328.6152 L334.6729 370.126 Lf374.418 353.5322 m371.248 354.291 L371.248 484.3408 L371.5703 494.0278 378.9482 495.5054 379.2588 495.563 c379.3193 495.5737 379.3789 495.5898 379.4375 495.6118 c379.6885 495.7065 379.9424 495.7861 380.2012 495.853 C377.6045 493.9727 374.6035 490.4341 374.418 484.0737 C374.418 353.5322 Lf376.418 354.248 m376.418 484.0444 L376.7002 493.7334 384.1797 495.7573 384.4941 495.8384 c384.5322 495.8477 384.5693 495.8594 384.6064 495.873 c385.8623 496.3496 387.6846 496.689 389.2236 495.6245 c391.0713 494.3472 392.0889 491.3608 392.0889 487.2148 C392.0889 483.6499 L389.0186 483.9355 L388.6875 484.3154 388.125 484.4058 387.7031 484.1113 C381.8711 480.0537 L381.8545 480.042 381.8457 480.0234 381.8301 480.0112 c381.8154 479.9995 381.7959 479.9966 381.7822 479.9844 c381.749 479.9556 381.7344 479.9136 381.7061 479.8809 c381.6543 479.8218 381.6055 479.7642 381.5693 479.6963 c381.543 479.646 381.5264 479.5947 381.5088 479.541 c381.4834 479.4648 381.4658 479.3911 381.459 479.3115 c381.457 479.2842 381.4424 479.2603 381.4424 479.2329 C381.4424 461.7085 L381.4424 461.2061 381.8154 460.7817 382.3135 460.7168 C390.543 459.646 L390.5859 459.6406 390.6289 459.6377 390.6719 459.6377 c390.7852 459.6377 390.8965 459.6602 391.0029 459.6978 c391.0391 459.7104 391.0703 459.7334 391.1045 459.75 c391.1592 459.7764 391.2158 459.7964 391.2656 459.833 C392.0889 460.4404 L392.0889 365.8457 L376.418 354.248 Lf418.0449 389.5459 m394.0889 372.0771 L394.0889 412.0889 L394.2051 412.1182 394.3193 412.165 394.4229 412.2393 C420.041 430.6445 L418.0449 389.5459 Lf*U*u1 D271.8896 405.3389 m274.5269 406.4902 275.1914 408.7813 274.6802 410.543 c274.1792 412.2686 272.354 413.9258 269.5352 413.4922 c269.4634 413.4814 269.394 413.4629 269.3291 413.4375 C267.2075 413.166 265.7231 412.5215 264.9121 411.5176 c264.3652 410.8398 264.1338 410.001 264.2437 409.0898 c264.3896 407.874 265.2158 406.7773 266.5708 406.001 c267.6899 405.3594 268.9941 405.0186 270.1538 405.0186 c270.7954 405.0186 271.3931 405.123 271.8896 405.3389 cf0 D267.5654 407.7363 m267.106 407.999 266.3218 408.5557 266.229 409.3281 c266.1836 409.7061 266.2593 410.0029 266.4678 410.2607 c266.9751 410.8887 268.2915 411.3428 270.0801 411.5078 c270.1636 411.5156 270.2437 411.5332 270.3193 411.5605 C271.6816 411.5576 272.5132 410.834 272.7598 409.9854 c273.0073 409.1318 272.7188 407.8828 271.0908 407.1729 c270.3975 406.8691 268.8511 406.998 267.5654 407.7363 cf*U*u1 D290.7593 419.2842 m288.7295 419.2842 287.0654 418.6777 286.1929 417.6211 c285.5972 416.8994 285.3823 415.999 285.5718 415.0166 c285.8115 413.7793 286.8203 412.3027 290.2671 412.3027 c290.96 412.3027 291.6255 412.3584 292.1113 412.3975 C292.229 412.4072 L293.6831 412.5264 295.5171 413.3135 296.1074 414.7627 c296.3315 415.3135 296.5439 416.4258 295.4473 417.6865 c294.4248 418.8643 292.355 419.2842 290.7593 419.2842 cf0 D294.2554 415.5176 m294.0449 415.001 293.022 414.4785 292.0659 414.4014 C291.9468 414.3916 L291.4707 414.3516 290.8774 414.3027 290.2671 414.3027 c287.7471 414.3027 287.5879 415.126 287.5356 415.3965 c287.436 415.9121 287.6021 416.1865 287.7354 416.3477 c288.2046 416.917 289.3916 417.2842 290.7593 417.2842 c292.3276 417.2842 293.5449 416.8271 293.9375 416.375 c294.3916 415.8525 294.2891 415.6006 294.2554 415.5176 cf*UUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF